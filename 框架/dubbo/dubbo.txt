dubbo:
1、是什么
    Apache Dubbo 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。
    Dubbo是一个分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案、服务治理方案。
2、调用过程：
    服务提供者（Provider）：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。
    服务消费者（Consumer）: 调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，
                         从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。
    注册中心（Registry）：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者
                        如果信息有变，注册中心提供新的信息给消费者
    监控中心（Monitor）：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心
                        监控服务提供者、消费者状态，与开发没有直接关系

    调用关系说明:
    服务容器spring负责启动，加载，运行服务提供者。
    服务提供者在启动时，向注册中心注册自己提供的服务。
    服务消费者在启动时，向注册中心订阅自己所需的服务。
    注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。
    服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用 如果调用失败，再选另一台调用。
    服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。
3、dubbo支持的协议
  支持多种协议：dubbo ,  hessian , rmi , http, webservice , thrift , memcached , redis。
  dubbo官方推荐使用dubbo协议。dubbo协议默认端口20880

    dubbo负载均衡实现：
        Dubbo实现负载均衡，一般是对服务提供者进行集群，服务消费者在请求消费时，通过一定的算法进行寻址（权重），跟nginx等做法差不多。
        具体做法，对服务提供者的配置文件，Dubbo 认为application name相同则认为是同一集群。部署多个同一集群的不同端口服务即可。

4、dubbo服务的优化策略：
    分包：抽象分散在多个项目中的公共接口，实体类，异常，工具类到一个项目中，在其他项目如服务提供者，消费者共用公共的资源。
    粒度：服务接口尽可能大粒度，每个服务方法应代表一个功能，而不是某功能的一个步骤，
         服务接口建议以业务场景为单位划分，并对相近业务做抽象，防止接口数量爆炸。
         不建议使用过于抽象的通用接口，如：Map query(Map)，这样的接口没有明确语义，会给后期维护带来不便。
    版本：每个接口都应定义版本号，区分同一接口的不同实现，如： <dubbo:service interface="com.xxx.XxxService" version="1.0" />。
    服务提供者消费者都在容器中启动：延长生命周期
5、dubbo常用标签
    分为三个类别：公用标签，服务提供者标签，服务消费者标签
    1、公用标签
        配置应用信息：应用名称dubbo内部区分服务的唯一标识
        <dubbo:application name=”服务的名称”/>
        配置注册中心：注册中心地址、check：dubbo服务启动时是否检查注册中心状态，默认true检查
        <dubbo:registry address=”zookeeper://ip:port” check="false" />
        配置dubbo服务之间通信的协议
        <!--dubbo协议：dubbo、端口-->
        <dubbo:protocol name="dubbo" port="20880" />
    2、服务提供者标签
      配置暴露的服务
       <!--直连方式：暴漏的接口服务
                  interface：暴漏的提供服务的完整类名
                  registry:注册dubbo的方式，这里使用N/A 直连，不使用注册中心
                  ref:暴漏接口的实现类bean的标识id
                  retries:消费者访问提供者，如果访问失败，则切换重试访问其它服务器次数
                  timeout：调用远程服务超时时间(毫秒)1s=1000毫秒=10000微秒
                  version:每个接口都应定义版本号，为后续不兼容升级提供可能。
                  当一个接口有不同的实现，项目早期使用的一个实现类， 之后创建接口的新的实现类。区分不同的接口实现使用version。
                  -->
       <dubbo:service
       interface="com.kayak.dubbo.service.OrderService"
       registry="N/A"
       ref="OrderServiceImpl"
       retries="2"
       timeout="2000"
       version="2.0.0"
       />
    3、服务消费者
      配置服务消费者引用远程服务
      <!--引用远程接口服务：
          id:远程服务对象的名称，通过代理模式创建的实现类对象的id  ***
          interface:远程接口全限定类名称
          registry：不使用注册中心，使用直连方式,当使用注册中心时不用该标签
          url：访问服务提供者地址，当使用注册中心时不用该标签，因为服务消费
          check:默认true,启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止Spring初始化完成
          timeout：接口超时时间
          version:每个接口都应定义版本号，为后续不兼容升级提供可能。
          当一个接口有不同的实现，项目早期使用的一个实现类， 之后创建接口的新的实现类。区分不同的接口实现使用version。
                  -->
      <dubbo:reference id="remoteOrderService"
                       interface="com.kayak.dubbo.service.OrderService"
                       registry="N/A"
                       url="dubbo://localhost:20880"
                       check="false"
                       timeout="2000"
                       version="2.0.0"
                       />
6、注册中心：
       zk，参考tools中的zk文件
       注意：zk和dubbo的pom依赖匹配，不同版本可能出现不兼容问题
7、监控中心：dubbo-admin不是一个账号，dubbo的监控中心是一个独立的项目，就叫dubbo-admin
    Dubbo 的使用，其实只需要有注册中心，消费者，提供者这三个就可以使用了，但是并不能看到有哪些消费者和提供者，
    为了更好的调试，发现问题，解决问题，因此引入 dubbo-admin。通过 dubbo-admin 可以对消费者和提供者进行管理。
    可以在dubbo应用部署做动态的调整，服务的管理。
    dubbo-admin
    图形化的服务管理页面；安装时需要指定注册中心地址，即可从注册中心中获取到所有的提供者/消费者进行配置管理

    监控的服务提供者和服务消费者时对应到配置的每一个service和reference。从githup上下载的源码需打jar才能运行，
    其中的springboot的配置需更改服务的端口、服务登录的用户名和密码，注册中心地址才能使用




