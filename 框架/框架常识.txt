1、本质：框架都是为了提高开发效率
2、mvc架构：
	实体类：domain、pojo、bean、entity
	目的：分工，各司其职
3、ORM:对象关系映射
ORM框架：运用ORM思想实现的通用型框架  主要是用来操作数据库
    hibernate(全ORM，慢：运用了大量反射，sql语句通过反射技术动态生成)
    mybatis(半ORM，程序人员自己编写sql,比较快,)
    结果集都是框架自动封装，框架自动解决面向对象语言与关系型数据库的冲突问题
    都基于jdbc，定义了java访问数据库的规范，手动解决面向对象语言与关系型数据库的冲突问题
4、RPC基础常识：
    （1）单一应用架构（单机系统）
    当网站流量很小时，应用规模小时，只需一个应用，将所有功能都部署在一起，以减少部署服务器数量和成本。
    此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。数据库的处理时间影响应用的性能
    （2）垂直系统：
    把需求模块进行划分多个系统（独立项目），划分后的系统各自没有联系，相互独立部署（用户系统部署10台服务器，积分系统部署2台）
    （3）分布式服务（SOA）架构
    当应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。
    此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。分布式系统将服务作为独立的应用，实现服务共享和重用。
    RPC：Remote Procedure Call  远程方法调用
    分布式系统是若干独立计算机（服务器）的集合，这些计算机对于用户来说就像单个相关系统，
    分布式系统（distributed system）是建立在网络之上的服务器端一种结构。
    **部署在独立服务器上的各个子系统（项目），相互之间可以调用，形成一个大型分布式系统
    **独立部署的服务器没有额外要求，只需要满足子系统需求即可。
    分布式系统中的计算机可以使用不同的操作系统，可以运行不同应用程序提供服务，将服务分散部署到多个计算机服务器上。
    （4） RPC?
      RPC 【Remote Procedure Call】是指远程过程调用，是一种进程间通信方式，是一种技术思想，而不是规范。
      它允许程序调用另一个地址空间（网络的另一台机器上）的过程或函数，而不用开发人员显式编码这个调用的细节。调用本地方法和调用远程方法一样。
      Rmi：reomote Method invoke   Java中RPC底层
      RPC的特点
      1. 简单：使用简单，建立分布式应用更容易。
      2. 高效：调用过程看起来十分清晰，效率高.
    (5) RPC框架：dubbo、springcloud