1、什么是微服务？
    微服务架构的风格，就是将单一程序开发成一个微服务，每个微服务运行在自己的进程中，并使用轻量级通信机制，通常是HTTP RESTFUL API 。
    这些服务围绕业务能力来划分构建的，并通过完全自动化部署机制来独立部署这些服务可以使用不同的编程语言，以及不同数据存储技术，
    以保证最低限度的集中式管理。
2、微服务特点：（理解微服务思想）
    1. 按业务(功能)划分为一个独立运行的程序，即服务单元。（不是绝对的）
    2. 服务之间通过 HTTP 协议相互通信。 http 是一个万能的协议 (web 应用都支持的模式)
        微服务单元之间的通信方般倾向于使用 HTTP 这种简单的通信机制，更多的时候是使用 RESTfulAPI 。
        这种接受请求、处理业务逻辑、返回数据的 HTTP 模式非常高效，并且这种通机制与平台和语言无关。
    3. 自动化部署。
        业务的粒度划分得越细，微服务的数量就越多，这时需要更稳定的部署机制。随着技术的发展，
        尤其是 Docker容器技术的推进，以及自动化部署工具（例如开源组件 Jenkins）的出现，
        自动化部署变得越来越简单。自动化部署可以提高部署的效率，减少人为的控制，部署过程中出现错误的概率降低，
        部署过程的每一步自动化，提高软件的质量。
    4. 可以用不同的编程语言。
        不同为服务单元可以通过 HTTP 协议相互通信
    5. 可以用不同的存储技术。
        按业务划分服务，服务与服务之间无稠合，就连数据库也是独立的个典型的微服务的架
        构就是每个微服务都有自己独立的数据库，好处：
        随着业务的不断扩张，服务与服务不需要提供数据库集成，而是提供 API 接口相互调用；
        还有个好处是数据库独立，单业务的数据盆少，易于维护，数据库性能有着明显的优势，数据库的迁移也很方便
    6. 服务集中化管理。
        按业务单元来划分服务的，服务数量越多，管理起来就越复杂，因此微服务必须使用集中化管理。
        目前流行的微服务框架中，例如 Spring Cloud 采用 Eureka 来注册服务和发现服务，
        另外， Zookeeper、 Consul、 等都是非常优秀的服务集中化管理框架。
    7. 微服务是一个分布式系统
        分布式系统是集群部署的，由很多计算机相互协作共同构成，它能够处理海量的用户请求。
        分布式系统通过网络协议来通信，所以分布式系统在空间上没有任何限制，即分布式服务器可以部署不同的机房和不同的地区。
        分布式系统比单体系统更加复杂，主要体现在服务的独立性和服务相互调用的可靠性，以及分布式事务、全局锁、全局 Id等，
        而单体系统不需要考虑这些复杂性。
        分布式系统的应用都是集群化部署，会给数据一致性带来困难。
        在分布式系统中，服务之间相互依赖，如果一个服务出现了故障或者是网络延迟，在高并发的情况下，会导致线程阻塞，
        在很短的时间内该服务的线程资源会消耗殆尽，最终使得该服务不可用。由于服务的相互依赖，可能会导致整个系统的不可用，
        这就是“雪崩效应”。为了防止此类事件的发生，分布式系统必然要采取相应的措施，例如“熔断机制”

3、在微服务架构中，有三大难题，服务故障的传播性(熔断)、服务的划分和分布式事务
4、基于分布式的微服务架构应该满足哪些维度？支撑起这些维度的具体技术？
    微服务在 CAP 理论中采用的是 AP 架构，即具有高可用和分区容错的特点

    维度：
         服务注册与发现
         服务调用
         服务熔断
         负载均衡
         服务降级
         服务消息队列
         配置中心管理
         服务网关
         服务监控
         全链路追踪
         自动化构建部署
         服务定时任务调度操作
         ...
    SpringCloud 就是微服务理念的一种具体落地实现方式，是多种微服务架构落地技术的集合体，俗称微服务全家桶;帮助微服务架构提供了必备的功能
    目前开发中常用的落地实现有三种：
    Dubbo+Zookeeper 半自动化的微服务实现架构 (别的管理没有)
    SpringCloud Netflix 一站式微服务架构
    SpringCloud Alibaba 新的一站式微服务架构
    三大公司
    Spring Netflix Alibaba

        服务的注册和发现。（eureka,nacos,consul,zk）
        服务的负载均衡。(ribbon,dubbo)
        服务的相互调用。（openFeign,restTemplate,dubbo）
        服务的容错。（hystrix，sentinel）
        服务网关。（gateway，zuul）
        服务配置的统一管理。（config-server,nacos,apollo）
        服务消息总线。(bus)
        服务安全组件。(security,Oauth2.0)
        服务监控。(admin) （jvm）
        链路追踪。(sleuth+zipkin)



