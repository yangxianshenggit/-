1、链路追踪：追踪微服务的调用路径
    在微服务框架中，一个由客户端发起的请求在后端系统中会经过多个不同的服务节点调用来协同产生最后的请求结果，
    每一个请求都会开成一条复杂的分布式服务调用链路，链路中的任何 一环出现高延时或错误都会引导起整个请求最后的失败。
    （不建议微服务中链路调用超过 3 次）
2、分布式链路调用监控：
    sleuth(cloud的采集链路信息组件) + zipkin(推特的开源的可视化的监控控制台)
    可通过一个 Web 前端轻松的收集和分析数据，cloudF版之后不用单独创建zipkin服务，直接使用zipkin-version-exec.jar即可
3、使用sleuth+zipkin：监控远程调用的链路过程
    1、服务提供者服务消费者都添加依赖：
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-zipkin</artifactId>
        </dependency>
    2、服务提供者服务消费者yml
        spring:
            zipkin:
                base-url: http://localhost:9411 #sleuth收集信息发送的地址
            sleuth:
                sampler:
                    probability: 1 #配置采样率 默认的采样比例为: 0.1，即 10%，所设置的值介于 0 到 1 之间，1 则表示全部采集
                    rate: 10 #为了使用速率限制采样器,选择每秒间隔接受的 trace 量，最小数字为 0，最大值为 2,147,483,647（最大 int） 默认为 10
    3、启动zipkin的jar，默认9411端口
    4、访问zipkin的web页面：http://ip:9411

4、监控每个微服务的详情：admin
    CS架构：监控谁谁就是C,admin-servera注册eureka获取服务列表
    根据服务列表与每个服务进行心跳检测，监控每个微服务并获取的详情信息
  admin-server
    1、创建模块admin-server
    2、pom依赖
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-starter-server</artifactId>
                <version>根据boot版本进行选择</version>
            </dependency>

    3、启动类上添加@EnableAdminServer
  admin-client
    4、需要admin监测的服务的pom加上依赖
        <dependency>
            <groupId>de.codecentric</groupId>
            <artifactId>spring-boot-admin-starter-client</artifactId>
            <version>根据boot版本进行选择</version>
        </dependency>
        //这个依赖控制者暴漏的接口信息,在idea的runDashAble/service中endPoints中的mapping，会显示项目的所有映射
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
    5、yml
        #监控配置 开启所有监控
        management:
              endpoints:
                web:
                  exposure:
                    include: '*' #暴漏所有的监控端点
                enabled-by-default: true

