redis
redis配置：
1、修改redis配置通常是redis.conf修改，先停止服务，修改完后启动
	redis运行时修改
	通过命令config get * 查看redis.conf配置;config set key value修改
	
2、redis.conf配置
	远程连接redis:
		远程连接redis需要修改redis主目录下的redis.conf配置文件： 
			①、bind ip 绑定ip此行注释 
			②、protected-mode yes 保护模式改为 no 
		若指定服务器链接需要设置
			①、bind ip 指定服务ip
			②、protected-mode yes 保护模式
			
	reids默认16个库：databases 16	默认使用0号库
	
	默认端口6379：port 6379
	
	redis数据文件名称：dbfilename dump.rdb
				 位置：dir ./ 		redis.conf所在当前目录下
	rdbcompression yes	指定存储至本地数据库时是否压缩数据，默认为 yes，Redis 采用 LZF 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大
	
	
	redis日志位置：logfile ""	配置日志所在的路径
		 日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 notice
					loglevel notice
					
	timeout 300	当客户端闲置多长秒后关闭连接，如果指定为 0 ，表示关闭该功能
	
	save <seconds> <changes>：指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合 save保存
	
	slaveof <masterip> <masterport>	设置当本机为 slave 服务时，设置 master 服务的 IP 地址及端口，在 Redis 启动时，它会自动从 master 进行数据同步 slave奴隶
	
	masterauth <master-password>	当 master 服务设置了密码保护时，slave 服务连接 master 的密码
	
	requirepass password	设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis 时需要通过 AUTH <password> 命令提供密码，默认关闭
	
	# maxclients 10000 redis最大连接数默认10000，这里被注释没有上限
	在redis-cli命令行使用：info clients可以查看当前的redis连接数
		connected_clients : 已连接客户端的数量（不包括通过从属服务器连接的客户端）
		client_longest_output_list : 当前连接的客户端当中，最长的输出列表
		client_longest_input_buf : 当前连接的客户端当中，最大输入缓存
		blocked_clients : 正在等待阻塞命令（BLPOP、BRPOP、BRPOPLPUSH）的客户端的数量
	
	maxmemory <bytes>	指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis 会先尝试清除已到期或即将到期的 Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的 vm 机制，会把 Key 存放内存，Value 会存放在 swap 区
	
	appendonly no	指定是否在每次更新操作后进行日志记录，Redis 在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis 本身同步数据文件是按上面 save 条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为 no
	
	appendfilename appendonly.aof	指定更新日志文件名，默认为 appendonly.aof
	
	appendfsync everysec 指定更新日志条件，共有 3 个可选值：
		no：表示等操作系统进行数据缓存同步到磁盘（快）
		always：表示每次更新操作后手动调用 fsync() 将数据写到磁盘（慢，安全）
		everysec：表示每秒同步一次（折中，默认值）
		
	glueoutputbuf yes	设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启
	
	hash-max-zipmap-entries 64
	hash-max-zipmap-value 512	指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法
		
	activerehashing yes	指定是否激活重置哈希，默认为开启（后面在介绍 Redis 的哈希算法时具体介绍）
		
	include /path/to/local.conf	指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件
	
redis常用命令  
1、启动：
	redis/src/
	前台启动：./redis-server ../redis.conf
	后台启动: ./redis-server ../redis.conf &
	
	如果redis的常用命令通过make install命令复制到/usr/local/bin/下，
	则在任意位置通过redis-server启动
	
2、停止：
	redis/src/
	客户端停止：redis-cli shutdown 或进入redis客户端shutdown
	暴力停止： kill -9 pid
	
3、redis自带的客户端连接redis服务端
	./redis-cli 此命令是连接本机 127.0.0.1 ，端口 6379 的 redis 
	./redis-cli -h ip -p port -a 密码
	
4、redis查看配置 config get *
		查看指定配置：config get key
		临时修改redis配置且立即生效：config set key value
		查看redis链接数：info clients
		
5、查看redis服务器状态：ping

6、返回当前数据库的 key 的数量。：dbsize

7、切换数据库命令：select index

8、删除当前库的数据：flushdb


KEY操作

1、keys * 查询所有的key	
	使用 ？ 表示单个字符 
	使用 * 表示多个字符 
	开发中不要用keys *
2、exists key [key…] 
	作用：判断 key 是否存在返回值：整数，存在 key 返回 1，其他返回 0. 使用多个 key，返回存在的 key 的数量。 

3、expire key seconds
	设置 key 的生存时间，超过时间，key 自动删除。单位是秒。
	开发中碰到key有效期到失效时设置值会造成永久性
	
4、ttl key 
	作用：以秒为单位，返回 key 的剩余生存时间（ttl: time to live）返回值： 
-1 ：没有设置 key 的生存时间， key 永不过期。 
-2 ：key 不存在 

5、type key 
	作用：查看 key 所存储值的数据类型返回值：字符串表示的数据类型 
	
6、del key [key…] 
	作用：删除存在的 key ，不存在的 key 忽略。
	
批量删除：
	 redis-cli -h IP -a passwd -p port keys "key*" |xargs  redis-cli -h IP -a passwd -p port del 
Redis 的 5 种数据类型 

1、字符串类型 string 
     字符串类型是 Redis 中最基本的数据类型，它能存储任何形式的字符串，包括二进制数据，序列化后的数据，JSON 化的对象甚至是一张图片。最大 512M。
	 
	常用命令：
		set key value
		get key
		incr key:value自增1，如果不存在创建key，value为0，再自增1
		decr ：将 key 中储存的数字值减1，如果 key 不存在，则么 key 的值先被初始化为 0 再执行 decr  操作（只能对数字类型的数据操作）
		append key value 
			说明：如果 key 存在， 则将 value 追加到 key 原来旧值的末尾如果 key 不存在， 则将 key 设置值为 value 
			返回值：追加字符串之后的总长度 
		mset key value [key value…] 
			说明：同时设置一个或多个 key-value 对返回值： OK 
		mget key [key …] 
			作用：获取所有(一个或多个)给定 key 的值返回值：包含所有 key 的列表
		
2、哈希类型 hash –java对象
    Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。
	常用命令：
		hset  key  field  value 
			作用：将哈希表 key 中的域 field 的值设为 value ，如果 key 不存在，则新建 hash 表，执行赋值，如果有 field ,则覆盖值。 
3、列表类型 list –java list array
	Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边） 

4、 集合类型 set – hashset
	Redis 的 Set 是 string 类型的无序集合，集合成员是唯一的，即集合中不能出现重复的数据. 

5、有序集合类型 zset （sorted set） - treeset
	Redis 有序集合 zset 和集合 set 一样也是 string 类型元素的集合，且不允许重复的成员。不同的是 zset 的每个元素都会关联一个分数（分数可以重复），redis 通过分数来为集合中的成员进行从小到大的排序。