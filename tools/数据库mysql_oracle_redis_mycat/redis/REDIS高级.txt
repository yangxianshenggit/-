事务
什么是事务 
	事务是指一系列数据更新操作，这一系列的操作步骤，要么完全地执行，要么完全地不执行。


事务4个属性：原子性、一致性、隔离性、持久性。这四个属性通常称为ACID特性。
	原子性（atomicity）：事务中包括的操作要么都做，要么都不做，不可拆分。
	一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。
	隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。
	持久性（durability）。持久性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。

Redis 中的事务（transaction）：
	是一组命令的集合，至少是两个或两个以上的命令，redis 事务保证这些命令被执行时中间不会被任何其他操作打断。 
	redis事务其实是指运用事务的思想实现一组集合命令的执行，没有回滚的概念，严格意义上没有事务。
	
	redis为什么没有回滚？
	redis本身是高性能高并发的nosql数据库
	
	redis 中事务命令：
		multi  - setAutoCommoit（false）-事务开启
			作用：标记一个事务的开始。事务内的多条命令会按照先后顺序被放进一个队列当中。 返回值：总是返回 ok 
		exec   -执行
			作用：执行所有事务块内的命令 返回值：事务内的所有执行语句内容，事务被打断（影响）返回 nil 
		discard   -取消
			作用：取消事务，放弃执行事务块内的所有命令返回值：总是返回 ok 
		watch   -监视某个或者某几个key的值的变化   语法：watch key [key ...] 
			作用：监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。 返回值：总是返回 ok 
			监视若想生效必须在事务开启前监视key，也就是在multi之前，而且使用监视的客户端必须是和执行事务的客户端是一致的
			并且事务中执行的key操作必须入队列后，有其他客户端修改这个key，事务才会执行失败
		unwatch –取消监视
			作用：取消 WATCH 命令对所有 key 的监视。如果在执行 WATCH 命令之后， EXEC 命令或 DISCARD 命令先被执行了的话，
			那么就不需要再执行 UNWATCH 了返回值：总是返回 ok
			watch命令是客户端监视，当客户端断开连接就会取消监视
			
	redis事务的队列中有错误命令或其他错误(内存不足)，事务执行失败
	在 exec 执行后的所产生的错误，  即使事务中有某个/某些命令在执行时产生了错误，事务中的其他命令仍然会继续执行。 
		Redis 在事务失败时不进行回滚，而是继续执行余下的命令。 
		Redis 这种设计原则是：Redis 命令只会因为错误的语法而失败（这些问题不能在入队时发现），或是命令用在了错误类型的键上面，失败的命令并不是 Redis 导致，而是由编程错误造成的，这样错误应该在开发的过程中被发现，生产环境中不应出现语法的错误。就是在程序的运行环境中不应该出现语法的错误。而 Redis 能够保证正确的命令一定会被执行。
		再者不需要对回滚进行支持，所以 Redis 的内部可以保持简单且快速。 
    Redis 事务可以一次执行多个命令， 并且带有以下三个重要的保证：
        批量操作在发送 EXEC 命令前被放入队列缓存。
        收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。
        在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。
        一个事务从开始到执行会经历以下三个阶段：
        开始事务。
        命令入队。
        执行事务。

redis持久化
	什么是持久化，将数据存储在硬盘上
	redis将数据存储在内存当中若linux宕机或断电或redis数据崩溃，则数据丢失提供两种持久化
	redis提供两种持久化：
		
	Redis Database（RDB），就是在指定的时间间隔内将内存中的数据集快照写入磁盘，数据恢复时将快照文件直接再读到内存。 
		
		RDB 保存了在某个时间点的数据集（全部数据）。存储在一个二进制文件中，只有一个文件。默认是 dump.rdb。RDB 技术非常适合做备份，可以保存最近一个小时，一天，一个月的全部数据。保存数据是在单独的进程中写文件，不影响 Redis 的正常使用。RDB 恢复数据时比其他 AOF 速度快。 
		
		配置：
		①：配置执行 RDB 生成快照文件的时间策略。 
			对Redis进行设置,让它在“ N 秒内数据集至少有 M 个 key 改动”这一条件被满足时，自动保存一次数据集。 
			配置格式：save  <seconds>  <changes> 
						save 900 1
						save 300 10 
						save 60 10000 
 
		②：dbfilename：设置 RDB 的文件名，默认文件名为 dump.rdb 
		③：dir：指定 RDB 文件的存储位置，默认是 ./ 当前目录 
		
		优缺点：
		优点：由于存储的是数据快照文件，恢复数据很方便，也比较快 ，容灾备份
		缺点： 
		1）会丢失最后一次快照以后更改的数据。如果你的应用能容忍一定数据的丢失，那么使用 rdb 是不错的选择；如果你不能容忍一定数据的丢失，使用 rdb 就不是一个很好的选择。 
		2）由于需要经常操作磁盘，RDB 会分出一个子进程。如果你的 redis 数据库很大的话，子进程占用比较多的时间，并且可能会影响 Redis 暂停服务一段时间（millisecond 级别），如果你的数据库超级大并且你的服务器 CPU 比较弱，有可能是会达到一秒。 
	AOF:
        A、 什么是 AOF 方式
        Append-only File（AOF），Redis 每次接收到一条改变数据的命令时，它将把该命令写到一个 AOF 文件中（只记录写操作，读操作不记录），
        当 Redis 重启时，它通过执行 AOF 文件中所有的命令来恢复数据。
        B、 如何实现
        AOF 方式的数据持久化，仅需在 redis.conf 文件中配置即可配置项：
        ①：appendonly：默认是 no，改成 yes 即开启了 aof 持久化
        ②：appendfilename：指定 AOF 文件名，默认文件名为 appendonly.aof
        ③：dir : 指定 RDB 和 AOF 文件存放的目录，默认是 ./
        ④：appendfsync：配置向 aof 文件写命令数据的策略：
        no：不主动进行同步操作，而是完全交由操作系统来做（即每 30 秒一次），比较快但不是很安全。
        always：每次执行写入都会执行同步，慢一些但是比较安全。
        everysec：每秒执行一次同步操作，比较平衡，介于速度和安全之间。这是默认项。
        ⑤：auto-aof-rewrite-min-size：允许重写的最小 AOF 文件大小，默认是 64M 。当 aof 文件大于 64M 时，开始整理 aop 文件，
            去掉无用的操作命令。缩小 aop 文件。

        总结
        1）append-only 文件是另一个可以提供完全数据保障的方案；
        2）AOF 文件会在操作过程中变得越来越大。比如，如果你做一百次加法计算，最后你只会在数据库里面得到最终的数值，但是在你的 AOF 里面会存在 100 次记录，
            其中 99 条记录对最终的结果是无用的；但 Redis 支持在不影响服务的前提下在后台重构 AOF 文件，让文件得以整理变小
        3）可以同时使用这两种方式，redis默认优先加载aof文件（aof数据最完整）；
redis慢查询
       TPS：是Transactions Per Second的缩写，也就是事务数/秒。它是软件测试结果的测量单位。
        一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。
        QPS：是Queries Per Second的缩写，意思是每秒查询率，是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。

        实际上应该说百分之八十的开发人员都用不到redis多线程。你们公司的qps每秒有100000吗？没有就不要想着用redis的多线程了。

	Redis6.0之前是单线程的，所有的请求发送过来的时候都是需要排队的（先进先出的队列），当一个查询语句非常耗时的话，会造成联级阻塞，在它之后的命令都是需要排队等待的，
	这种情况经常会造成客户端超时。慢查询日志是Redis服务端在命令执行前后计算每条命令的执行时长，当超过某个阈值是记录在一个列表中。日志中记录了慢查询发生的时间，
	还有执行时长、具体什么命令等信息，它可以用来帮助开发和运维人员定位系统中存在的慢查询。
	在Redis中配置慢查询有两种方式，一种是修改配置文件，另一种是使用动态命令去配置：
	#阈值，超出此时间段的命令会被记录为慢查询，单位为微妙，默认为10000微妙；注：1秒=10000微妙
	#如果设置为0的话，则会记录全部redis命令，设置为<0则全部不记录
	config set slowlog-log-slower-than 10000
	# redis中最大存储慢查询记录的条数，当慢查询日志列表已经达到最大长度时，最早插入的那条命令将被从列表中移出
	config set slowlog-max-len 1000
	#用户更新配置
	config rewrite
	
	#获取当前慢查询条数
	slowlog len
	#获取n条慢查询日志，n为空则查询全部
	slowlog get [n]
	
	查看慢查询日志:
	slowlog get
	1) 1)(integer) 4 				#日志的唯一标识（uid）
	   2)(integer) 1378781447 		#日志执行的unix时间戳
	   3)(integer) 13000 			#命令执行的时长微妙为计算
	   4) 1) "SET"
		  2) "database"
		  3) "Redis"
redis主从复制，容灾策略，读写分离：
    为了避免单点故障，我们需要将数据复制多份部署在多台不同的服务器上，即使有一台服务器出现故障其他服务器依然可以继续提供服务。
    查看当前redis服务的角色：config get replication(复制)
    可以通过部署多台 redis，并在配置文件中指定这几台 redis 之间的主从关系，主负责写入数据，同时把写入的数据实时同步到从机器，
    这种模式叫做主从复制，即 master/slave，并且 redis 默认 master 用于写，slave 用于读，向 slave 写数据会导致错误 ，从服务器主要负责读操作

    方式 1：修改配置文件，启动时，服务器读取配置文件，并自动成为指定服务器的从服
    务器，从而构成主从复制的关系
        编辑 Master 配置文件
        编辑 Master 的配置文件 redis6380.conf : 在空文件加入如下内容
        include /usr/local/redis-3.2.9/redis.conf
        daemonize yes
        port 6380
        pidfile /var/run/redis_6380.pid
        logfile 6380.log
        dbfilename dump6380.rdb

        编辑 Slave 的配置文件 redis6382.conf 和 redis6384.conf: 在空文件加入如下内容
        redis6382.conf：
        include /usr/local/redis-3.2.9/redis.conf
        daemonize yes
        port 6382
        pidfile /var/run/redis_6382.pid
        logfile 6382.log
        dbfilename dump6382.rdb
        slaveof 127.0.0.1 6380
    方式 2： ./redis-server --slaveof <master-ip> <master-port>，在启动 redis 时指定当
    前服务成为某个主 Redis 服务的从 Slave

    当 Master 服务出现故障，需手动将 slave 中的一个提升为 master， 剩下的 slave 挂至新的master 上（冷处理：机器挂掉了，再处理）
    命令：
    ①：slaveof no one，将一台 slave 服务器提升为 Master （提升某 slave 为 master）
    ②：slaveof 127.0.0.1 6381 （将 slave 挂至新的 master 上）

     总结
    1、一个 master 可以有多个 slave
    2、slave 下线，读请求的处理性能下降
    3、master 下线，写请求无法执行
    4、当 master 发生故障，需手动将其中一台 slave 使用 slaveof no one 命令提升为 master，其它 slave 执行 slaveof 命令指向这个新的 master，从新的 master 处同步数据
    5、主从复制模式的故障转移需要手动操作，要实现自动化处理，这就需要 Sentinel 哨兵，实现故障自动转移

redis哨兵：
    Sentinel 哨兵是 redis 官方提供的高可用方案，可以用它来监控多个 Redis 服务实例的运行情况。Redis Sentinel 是一个运行在特殊模式下的 Redis 服务器。
    Redis Sentinel 是在多个 Sentinel 进程环境下互相协作工作的。

    Sentinel 系统有三个主要任务：
    监控：Sentinel 不断的检查主服务和从服务器是否按照预期正常工作。
    提醒：被监控的 Redis 出现问题时，Sentinel 会通知管理员或其他应用程序。
    自动故障转移：监控的主 Redis 不能正常工作，Sentinel 会开始进行故障迁移操作。将一个从服务器升级新的主服务器。
    让其他从服务器挂到新的主服务器。同时向客户端提供新的主服务器地址。

    配置哨兵配置：
    1、在redis安装目录下将sentinal配置文件复制几份
       Sentinel监控主(Master)Redis, Sentinel根据Master的配置自动发现Master的Slave,Sentinel 默认端口号为26379 。
    3、sentinel.conf 修改port , 修改监控的 master 地址：参数ip、端口、投票数量
        sentinel monitor mymaster 127.0.0.1 6379 2

     redis安装时make编译后就产生了redis-sentinel程序文件，可以在一个redis中运行多个 sentinel进程。
     启动一个运行在Sentinel模式下的Redis服务实例
     ./redis-sentinel  sentinel 配置文件

      监控
     1）Sentinel 会不断检查 Master 和 Slave 是否正常
     2）如果 Sentinel 挂了，就无法监控，所以需要多个哨兵，组成 Sentinel 网络，一个健康的
        Sentinel 至少有 3 个 Sentinel 应用。 彼此在独立的物理机器或虚拟机。
     3）监控同一个 Master 的 Sentinel 会自动连接，组成一个分布式的 Sentinel 网络，互相通信并交换彼此关于被监控服务器的信息
     4）当一个 Sentinel 认为被监控的服务器已经下线时，它会向网络中的其它 Sentinel 进行确认，判断该服务器是否真的已经下线
     5）如果下线的服务器为主服务器，那么 Sentinel 网络将对下线主服务器进行自动故障转移，通过将下线主服务器的某个从服务器提升为新的主服务器，并让其从服务器转移到新的主服务器下，以此来让系统重新回到正常状态
     6）下线的旧主服务器重新上线，Sentinel 会让它成为从，挂到新的主服务器下

     总结
     主从复制，解决了读请求的分担，从节点下线，会使得读请求能力有所下降，Master 下线，写请求无法执行
     Sentinel 会在 Master 下线后自动执行故障转移操作，提升一台 Slave 为 Master，并让其它
     Slave 成为新 Master 的 Slave
redis6.0多线程

