一、下载项目源码
    从远程仓库直接克隆
    xxl-job-admin：调度中心
    xxl-job-core：公共依赖
    xxl-job-executor-samples：执行器Sample示例（选择合适的版本执行器，可直接使用，也可以参考其并将现有项目改造成执行器）
        ：xxl-job-executor-sample-springboot：Springboot版本，通过Springboot管理执行器，推荐这种方式；
        ：xxl-job-executor-sample-frameless：无框架版本；
二、根据官方文档快速入门
    xxl-job\doc\XXL-JOB官方文档.md
    1、初始化“调度数据库”
        从项目源码获取 "调度数据库初始化SQL脚本" 并执行即可。
        "调度数据库初始化SQL脚本" 位置为:
            /xxl-job/doc/db/tables_xxl_job.sql
            sql中的编码是 utf8mb4 一个字符占4个字节，建表时mysql可能会报字符长度超限，可修改为utf8
    2、配置调度中心,单独的web服务
       调度中心项目：xxl-job-admin
       作用：统一管理任务调度平台上调度任务，负责触发调度执行，并且提供任务管理平台。
       a.调度中心配置文件地址：
         /xxl-job/xxl-job-admin/src/main/resources/application.properties
         详情看 tools/定时任务-任务调度/xxljob/config/xx-job-admin_application.properties
       b.将项目编译打包部署。
         调度中心访问地址：http://localhost:8080/xxl-job-admin (该地址执行器将会使用到，作为回调地址)
         默认登录账号 "admin/123456"
       c.调度中心集群
        调度中心支持集群部署，提升调度系统容灾和可用性。
        集群情况下各节点务必连接同一个mysql实例;如果mysql做主从,调度中心集群节点务必强制走主库;
        几点要求和建议：
            各节点务必连接同一个DB实例;如果DB做主从,调度中心集群节点务必强制走主库;；
            集群机器时钟保持一致（单机集群忽视）；
            推荐通过nginx为调度中心集群做负载均衡，分配域名。调度中心访问、执行器回调配置、调用API服务等操作均通过该域名进行。
        d.Docker 镜像方式搭建调度中心:参考官方文档
    3、配置部署“执行器项目”
        “执行器”项目：xxl-job-executor-sample-springboot (提供多种版本执行器供选择，现以 springboot 版本为例，可直接使用，也可以参考其并将现有项目改造成执行器)
        作用：负责接收“调度中心”的调度并执行；可直接部署执行器，也可以将执行器集成到现有业务项目中。
        a.maven依赖
          确认pom文件中引入了 "xxl-job-core" 的maven依赖；
        b.执行器配置，配置文件地址：
          /xxl-job-executor-sample-springboot/src/main/resources/application.properties执行器配置
          详情看 tools/定时任务-任务调度/xxljob/config/xxl-job-executor-sample-springboot_application.properties
        c.执行器组件，配置文件地址：
          /xxl-job-executor-sample-springboot/src/main/java/com/xxl/job/executor/core/config/XxlJobConfig.java
          详情看 tools/定时任务-任务调度/xxljob/config/XxlJobConfig.java
        d.已经正确进行上述配置，可将执行器项目编译打部署，系统提供多种执行器Sample(样本)示例项目，选择其中一个即可，
          xxl-job-executor-sample-springboot：项目编译打包成springboot类型的可执行JAR包，命令启动即可；
          xxl-job-executor-sample-frameless：项目编译打包成JAR包，命令启动即可；
        e.执行器集群（可选）：
          执行器支持集群部署，提升调度系统可用性，同时提升任务处理能力。
          执行器集群部署时，几点要求和建议：
              执行器回调地址（xxl.job.admin.addresses）需要保持一致；执行器根据该配置进行执行器自动注册等操作。
              同一个执行器集群内AppName（xxl.job.executor.appname）需要保持一致；调度中心根据该配置动态发现不同集群的在线执行器列表。
三、配置
    基础配置：
        - 执行器：任务的绑定的执行器，任务触发调度时将会自动发现注册成功的执行器, 实现任务自动发现功能; 另一方面也可以方便的进行任务分组。每个任务必须绑定一个执行器, 可在 "执行器管理" 进行设置;
        - 任务描述：任务的描述信息，便于任务管理；
        - 负责人：任务的负责人；
        - 报警邮件：任务调度失败时邮件通知的邮箱地址，支持配置多邮箱地址，配置多个邮箱地址时用逗号分隔；

    触发配置：
        - 调度类型：
            无：该类型不会主动触发调度；
            CRON：该类型将会通过CRON，触发任务调度；
            固定速度：该类型将会以固定速度，触发任务调度；按照固定的间隔时间，周期性触发；
            固定延迟：该类型将会以固定延迟，触发任务调度；按照固定的延迟时间，从上次调度结束后开始计算延迟时间，到达延迟时间后触发下次调度；
        - CRON：触发任务执行的Cron表达式；
        - 固定速度：固件速度的时间间隔，单位为秒；
        - 固定延迟：固件延迟的时间间隔，单位为秒；

    任务配置：
        - 运行模式：
            BEAN模式：任务以JobHandler方式维护在执行器端；需要结合 "JobHandler" 属性匹配执行器中任务；
            GLUE模式(Java)：任务以源码方式维护在调度中心；该模式的任务实际上是一段继承自IJobHandler的Java类代码并 "groovy" 源码方式维护，它在执行器项目中运行，可使用@Resource/@Autowire注入执行器里中的其他服务；
            GLUE模式(Shell)：任务以源码方式维护在调度中心；该模式的任务实际上是一段 "shell" 脚本；
            GLUE模式(Python)：任务以源码方式维护在调度中心；该模式的任务实际上是一段 "python" 脚本；
            GLUE模式(PHP)：任务以源码方式维护在调度中心；该模式的任务实际上是一段 "php" 脚本；
            GLUE模式(NodeJS)：任务以源码方式维护在调度中心；该模式的任务实际上是一段 "nodejs" 脚本；
            GLUE模式(PowerShell)：任务以源码方式维护在调度中心；该模式的任务实际上是一段 "PowerShell" 脚本；
        - JobHandler：运行模式为 "BEAN模式" 时生效，对应执行器中新开发的JobHandler类“@JobHandler”注解自定义的value值；
        - 执行参数：任务执行所需的参数；

    高级配置：
        - 路由策略：当执行器集群部署时，提供丰富的路由策略，包括；
            FIRST（第一个）：固定选择第一个机器；
            LAST（最后一个）：固定选择最后一个机器；
            ROUND（轮询）：；
            RANDOM（随机）：随机选择在线的机器；
            CONSISTENT_HASH（一致性HASH）：每个任务按照Hash算法固定选择某一台机器，且所有任务均匀散列在不同机器上。
            LEAST_FREQUENTLY_USED（最不经常使用）：使用频率最低的机器优先被选举；
            LEAST_RECENTLY_USED（最近最久未使用）：最久未使用的机器优先被选举；
            FAILOVER（故障转移）：按照顺序依次进行心跳检测，第一个心跳检测成功的机器选定为目标执行器并发起调度；
            BUSYOVER（忙碌转移）：按照顺序依次进行空闲检测，第一个空闲检测成功的机器选定为目标执行器并发起调度；
            SHARDING_BROADCAST(分片广播)：广播触发对应集群中所有机器执行一次任务，同时系统自动传递分片参数；可根据分片参数开发分片任务；
        - 子任务：每个任务都拥有一个唯一的任务ID(任务ID可以从任务列表获取)，当本任务执行结束并且执行成功时，将会触发子任务ID所对应的任务的一次主动调度。
        - 调度过期策略：
            - 忽略：调度过期后，忽略过期的任务，从当前时间开始重新计算下次触发时间；
            - 立即执行一次：调度过期后，立即执行一次，并从当前时间开始重新计算下次触发时间；
        - 阻塞处理策略：调度过于密集执行器来不及处理时的处理策略；
            单机串行（默认）：调度请求进入单机执行器后，调度请求进入FIFO队列并以串行方式运行；
            丢弃后续调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，本次请求将会被丢弃并标记为失败；
            覆盖之前调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，将会终止运行中的调度任务并清空队列，然后运行本地调度任务；
        - 任务超时时间：支持自定义任务超时时间，任务运行超时将会主动中断任务；
        - 失败重试次数；支持自定义任务失败重试次数，当任务失败时将会按照预设的失败重试次数主动进行重试；
