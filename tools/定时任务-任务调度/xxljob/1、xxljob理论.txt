一、定时任务调度 实现方式
    定时：那个时间节点     任务：需求     调度：触发
    场景：对账、数据同步、定期发送报表数据、活动推送、超时状态判断、缓存数据的定时更新、定式给用户发邮件
    传统：
        1、Thread-->Thread.sleep方法创建定时任务
        2、java.util.TimeTask创建定时任务
        3、使用线程池创建定时任务
        4、springboot当中注解：@Schedule
        5、使用Quartz第三方框架实现定时任务 springboot2.0引入
    分布式：
        6、xxl-job、elastic-job（配合zk）、TBSchedule、quartz的集群
    前5种只适用单例，部署多台就会执行多次，其中使用@Schedule最简单
    xxl-job在分布式集群的情况下，保证定时任务一致性（不被重复执行）
    原理同nginx类型，所有定时任务通过任务调度平台调用，也可配置负载均衡。其中时间表达式可以很灵活，可以自行搜索
    都是通过thread.sleep实现
二、传统定时任务的缺点
    1、单机处理极限：多线程并行处理可以提高单位时间的处理效率，但是单机能力毕竟有限（主要是CPU、内存和磁盘），
       始终会有单机处理不过来的情况
    2、无法避免单点故障，或者说集群的话没有简易的解决定时任务一致性的方案
三、传统定时任务考虑(解决)的问题
    1.定时任务和业务代码存放在同一个服务器(小项目)
    2.大型互联网公司定时任务代码执行与业务执行代码服务器都是分开，都是独立的部署。（部署多台就会执行多次）
    3.定时任务服务器是否需要考虑高并发?
        同一时间点执行多个任务间隔场景是不需要，同时场景可能会发生高并发
    4.如果在高并发的情况下，定时任务服务宕机之后应该如何处理?
        (单台节点)使用心跳检测监控自动重启、补偿机制(每个任务打一个小标记)
        定时任务在执行代码的时候中间突然报错了，使用日志记录错误，跳过继续执行
        再使用定时任务扫描日志错误记录，进行补偿信息。
        定时任务在执行的时候，导致整个服务异常结束掉，发送邮件通知给运维人员
四、如何保证集群的定时任务服务的集群
    1.使用Zookeeper实现分布式锁(效率不是很高)
    2.在配置文件中加上启动定时任务的开关
    3.启动的时候使用数据库唯一标识
    以上不推荐!!!!!!!!!!!
    推荐使用分布式任务调度平台(核心) XXL-Job、Elastric-Job依赖ZK
五、分布式任务调度平台能做那些事
    1.支持定时任务服务集群(前提保证幂等性问题)Job负载均衡轮训机制
    2.支持]ob补偿如果Job执行失败的话，会自动实现重试机制，如果重启多次还是失败的话，发送邮件通知给运维人员。
    3.支持Job日志记录
    4.动态配置定时规则传统定时JOb触发规则都是写死，采用动态配置Job规则
    。。。。
六、概念和运行原理
    执行器:定时Job实际执行的服务地址
    任务管理:配置定时任务规则、路由策略、允许模式、等。
    xxl-job-admin平台独立Web服务
    步骤:
    1.在xxl-job-admin平台创建执行器(定时任务实际执行地址)
    2.在xxl-job-admin平台新建任务，填写对应的执行器
    3.在定时任务服务的代码中，使用@JobHandler表示该类为定时任务执行方法
    4.定时任务服务项目启动的时候，会将服务器本地信息注册到 xxl-job-admin,只要类上加上@JobHandler注解都会注册xxl-job-admin容器中。
    在调度平台上配置好定时任务后，首先会现在xxl-job-admin触发规则，查询对应执行器(实际定时任务执行地址)，让后在使用
    xxl-job-admin发送请求到实际的定时任务地址执行。(加上)使用JobHandler名称查找对应的服务器上JobHandler容器获取到类的信息的，
    在使用反射机制进行执行。
