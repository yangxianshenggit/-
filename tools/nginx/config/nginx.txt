nginx:
	基本概念：
		反向代理、负载均衡、动静分离
	
	安装、常用命令、配置文件
	
	配置的实例
		如何实现反向代理，反向代理场景
		如何实现负载均衡
		如何实现动静分离
		
	配置高可用集群
	
	执行原理
	
	
	
基本概念：
	高性能的HTTP和反向代理的服务器，特点：占有内存少，并发能力强，在同类型的网页服务器中表现较好
	Nginx专为性能优化而开发，性能是其最重要的考量，能接受高负载的考验，能支持高达50000个并发连接数
	
	Nginx支持热部署，可以做到7*24小时不间断运行。可以在不断服务的情况下对版本进行升级

正向代理：
	把局域网外的Internet想象为一个资源库，则局域网中的客户访问Internet，需要通过代理服务器访问，这种代理服务就称为正向代理
	通过代理服务器来访问服务器的过程，需要客户端配置代理服务器进行指定网站访问
	

反向代理：
	客户端对代理无感知，因为客户端不需要任何配制可以访问。只需将请求发送到反向代理服务器，由反向代理服务器选择目标服务器获取
	数据后，返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器隐藏了真是服务器的IP地址。
	
	客户端请求原先是直接请求到服务端，现在先请求到代理服务器，代理服务器将请求转发到应用上，这样就是反向代理过程。
	
负载均衡：
	并发量越来越高，增加服务器物理配置的方法解决不了根本问题，纵向解决问题的办法行不通，考虑横向。集群的概念产生，单台服务器
	解决不了就增加服务器的数量，然后将请求分发到各个服务器上，将原先的请求集中的单个服务器上的情况改为请求分发到多个服务器上，
	将负载分发到不同的服务器
	
动静分离：
	加快网站解析的速度，把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低单台服务器的压力
	
	
常用nginx命令：
	nginx安装后在/usr/local/nginx/目录下生成启动命令和配置
	启动：/usr/local/nginx/sbin/nginx
	停止: /usr/local/nginx/sbin/nginx -s stop
	重新加载配置：/usr/local/nginx/sbin/nginx -s reload
	查看nginx版本：/usr/local/nginx/sbin/nginx -v
	

nginx负载均衡分配策略：
	1、轮询（默认）
		每个请求按照时间顺序逐一分配到不同的后端服务器，如果服务器down掉，能自动剔除
	2、weight
		代表权重，默认为1，权重越高被分配的请求越多
	3、ip_hash
		每个请求按访问的ip的hash结果分配，这样每个访客固定访问一个服务器
	4、fair(第三方)
		按服务器的响应时间来分配，响应时间短的优先分配

		
		#配置负载均衡
		upstream myserver{
			server IP1:port1 weight=10;
			server IP2:port2 weight=10;
		}
		server {
			#监听的端口
			listen  80;
			#请求的IP或域名，多个之间逗号隔开
			server_name IP/域名;
			#匹配的uri
			=： 用于不含正则的uri前，要求请求字符串与uri，若匹配成功则停止继续向下搜索并立即处理请求
			~:  用于表示uri包含正则，并区分大小写
			~*：用于表示uri包含正则，且不区分大小写
			^~: 用于不含正则的uri前，要求nginx服务器找到标识uri和请求字符串匹配度最高的location后，立即使用此location处理请求，
			而不再使用location块中的正则uri和请求字符串做匹配
			location uri {
				
			}
		}
		
nginx动静分离策略：
	简单说就是把动态跟静态请求分开，不能理解为单纯的把动态页面和静态页面物理分离。严格意义上说应该是动态请求静态请求分开，
	可以理解为Nginx处理静态页面，tomcat处理动态页面。
	动静分离大致分两种：
		1、纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是当前主流
		2、动态和静态文件混合一起发布，nginx来分开。
	通过location制定不同的后缀名实现不同的请求转发。
	通过expires参数设置，可以使客户端缓存过期时间，减少与服务器之间的请求和流量。适合不经常变动的资源
	Expires定义：给一个资源设定一个过期时间，无需去服务端验证，直接通过客户端自身确认是否过期，不会产生额外流量。
	expires 3d;//缓存3天，客户端如果三天之内访问缓存已访问的资源，nginx会对比服务器该文件最后更新时间，没有变化则不会抓取，
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	

	
	
	
	
	
	
	
	
	