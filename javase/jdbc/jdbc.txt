JDBC
	1、java操纵数据库：
		java应用---->JDBC---->数据库驱动---->DB
	2、JDBC是java操作数据库的规范,本质是：java通过IO流将sql发送到DB，DB再将结果通过IO流返给java
			数据库驱动：mysql/oracle驱动符合JDBC规范(接口)
	3、java使用JDBC操作数据库过程:
		使用第三方jar中的类的方法操作数据库
	
	4、java操纵数据库步骤
		1、导入JDBC驱动包
  ​			需要下载包含数据库编程所需的JDBC的jar包
		2、注册JDBC驱动程序
  ​			要求您初始化驱动程序，以便您可以打开与数据库的通信通道
		3、打开连接
			需要使用DriverManager.getConnection（）方法创建一个Connection对象，该对象表示与数据库的物理连接
		4、执行查询
			需要使用类型为Statement的对象来构建和提交SQL语句到数据库
		5、从结果集中提取数据
			需要使用相应的*ResultSet.getXXX（）*方法从结果集中检索数据
		6、释放资源
		​	需要明确地关闭所有数据库资源
		
			//注册驱动
           Class.forName("com.mysql.jdbc.Driver");
           //获取数据库连接，代表java和DB通信
           /**
            * url:连接数据库的地址：
            *   协议： jdbc:mysql
            *   ip: 数据库ip
            *   port: 3306
            *   数据库名称: web
            *  user：用户名
            *  passwd:密码
            */
           Connection connection = DriverManager.getConnection("jdbc:mysql://192.168.31.132:3306/web", "root", "1qaz2wsx");
			//编写sql
           String sql ="insert into DEPT values(66,'狗仔部','北京')";
           //创建流对象
           statement = connection.createStatement();
           //执行sql，返回影像记录数
           int i = statement.executeUpdate(sql);
		   ResultSet resultSet = statement.executeQuery("select * from DEPT");
            //指针是否可以下移并且进行下移操作
            while (resultSet.next()) {
                //getInt进行了方法重载可以传下标，下标从1开始，也可以传列名
                int deptno = resultSet.getInt("deptno");
                String dname = resultSet.getString("dname");
                String loc = resultSet.getString("loc");
                System.out.println(deptno + "\t" + dname + "\t" + loc);
            }
		   //关闭流和连接
		   connection.close();
		   statement.close();
		   resultSet.close();
		   
	5、sql注入
		1、statement弊端：
			参数时将变量拼接到sql语句中，比较麻烦
			参数通过变量方式进行拼接有漏洞
			没有预编译功能
		
			sql注入:编写一个非法sql，但能达到正确sql语句效果
		2、preparedStatement：
			有预编译功能
			没有sql注入问题，调用方法给sql的占位符设置值，给值加了引号变成字符串
			
			statement是preparedStatement的父类;
		3、PreparedStatement的使用
			PreparedStatement preparedStatement =
					connection.prepareStatement("delete from DEPT where deptno=?");
			//第一个参数是索引，从1开始	
            preparedStatement.setInt(1,66);
			preparedStatement.setObject(index,Object obj);
	
	6、java代码处理事务
		
		//关闭自动提交
		connection.setAutoCommit(false);
		//提交事务
         connection.commit();
		 //回滚
		 connection.rollback();
		 
		 注意：一组交易要在一个事务中完成，要么同时成功要么同时失败，也就是说必须在一个connection中完成一组DML
	
	7、数据库属性配置文件
		db.properties，建议放在src[classpath]目录
		涉及方法
			 //通过这种方式可以从src目录下读取文件，因为src相当于classpath
			InputStream stream =
                JDBCUtil.class.getClassLoader().getResourceAsStream("mysql.properties");
			Properties ps = new Properties();
			ps.load(stream);
			String value=ps.getProperty("key");
		原因：
			1、将连接数据库信息和java代码参杂在一起，通常称为硬编码
			2、将数据库信息写在属性配置文件方便管理
		