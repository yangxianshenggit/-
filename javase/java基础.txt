基础：

1、java语言特性：
	简单性(无指针)、健壮性(GC)、多线程(且提供线程安全机制)、可移植性(jvm将不同操作系统之间的差异性屏蔽掉了)、面向对象(OOP)
	
2、绝对路径和相对路径区别，path、classpath、JAVA_HOME区别，以及在windows和linux环境如何配置？
	path:是windows专属的环境变量，通常将jdk的bin目录配置
	classpath:类加载默认的地址,开发工具中时src/resource
	JAVA_HOME:三方插件依赖jdk，配置至jdk
	windows系统配置环境变量在高级系统设置中配置
	linux系统配置环境变量在/etc/profile文件中配置，随后用source命令加载生效
	
3、JDK、JRE、JVM 三者关系
	jdk包含jre包含jvm
	JVM 不能单独安装的

4、 Java 的加载与执行
	java分为编译和运行，编译命令javac 类名+扩展名   运行命令java 类名  或  java -jar 
	程序在编译阶段主要是进行语法的检查，字面量的运算,生成一个或多个字节码文件
	运行阶段通过java命令启动类加载器，类加载器去硬盘上搜索字节码文件（默认情况下类加载器是从当前目录下寻找字节码文件），
	找到该字节码文件之后，将其加载到 JVM 当中，JVM 中的解释器会将字节码文件解释为操作系统可以执行的二进制码，
	然后操作系统通过执行二进制码和硬件平台交互。
	
5、类名、全限定类名、扩展名
	类名指类的名字，不带扩展名
	全限定类名是包名+类名
	
6、注释:表示代码的功能
	//单行注释
	/*	*	*/多行注释
	/**	*	*/doc注释：通常翻译为帮助文档
	
7、public class和class区别
	一个源文件中 public class 的类只能定义一个，并且要求此类名必须和 java 源文件名保持一致。
	
8、JDK 常用的基本组件包括：
	javac（编译器）、java（运行 java 程序）、javadoc（提取 java程序的注释信息并生成帮助文档）、jar（打 jar 包）、jdb（查错工具）、javap（反编译器）、jconsole（系统调试和内存监控工具）、jstack(查看运行时报错)等
	
9、标识符：程序人员有权利命名的符号
	规则：
	① 标识符只能由数字、字母、下划线“_”、美元符号“$”组成，不能含有其它符号。
	② 标识符不能以数字开始。
	③ java 关键字和保留字不能作为标识符。
	④ 标识符严格区分大小写。
	⑤ 标识符理论上没有长度限制。
	规范：
	① 见名知意 ② 遵循驼峰命名方式 ③ 类名、接口名首字母大写，后面每个单词首字母大写	④ 变量名、方法名首字母小写，后面每个单词首字母大写 ⑤ 常量名全部大写，单词和单词之间使用“_”衔接
	
10、关键字：全部小写，sun定义的有特殊含义的字符
	变量：数据类型 变量名 字面量 
	字面量：看上去是多少就是多少的值
	
11、数据类型：
	作用就是决定程序运行阶段给该变量分配多大的内存空间。
			byte	short	int		long	float	double	boolean		char
	字节	    1		2		4		8		4		8		1			2
	默认 	0		0		0		0L		0F		0.0d	false		/u0000
	
	1byte=8bit		1KB=1024byte	1MB=1024KB		1GB=1024MB		1TB=1024GB
		
	0表示正数，1表示负数
	
	常见字符编码集：utf8、iso-8859-1、GBK、Big5、ASCII（256个）
	ASCII: A=65	a=97 空格=32 
	
	0 开始表示八进制，以 0x 开始表示十六进制，以 0b 开始表示二进制
	
12、转义字符：用一些普通的字符组合代表一些特殊的字符
	\t 代表制表符，\n 是换行符，\\表示一个普通的\字符，\'表示一个普通的'，\"表示一个普通的"。请看以下代码：

13、方法：静态方法、实例方法、构造方法、抽象方法、不能被重写的方法（final修饰）

	访问修饰符权限：
		
	静态方法：被static修饰、类级别方法可以通过类名调用(也可以通过引用调用，实际还是类名调用)
	实例方法：没有被static修饰、实例级别方法只能通过引用调用
	构造方法：构造方法的执行不一定会创建对象（super调用父类构造方法），构造方法调用通过new和super，构造方法的方法体第一行默认是super()
	抽象方法：被abstract修饰的方法都是抽象方法，接口中所有的方法都是抽象方法默认前缀是public abstract，抽象方法没有方法体，是为了让子类或实现类进行重写该方法，abstract不能和final一起使用，抽象方法只能出现在抽象类和接口中
	不能被重写的方法（final修饰）：final修饰方法代表该方法不能被重写
	
14、变量：静态变量、常量、属性(实例变量)、局部变量

15、枚举

16、内部类

17、接口、抽象类

18、 private、extends、implements、this、super、final、abstract、static、instanceof、interface


19、面向对象和面向过程、封装继承多态

20、java的调用方式、断点调试

21、==和equals区别


	
	