1、什么是进程？
    进程是一个应用程序，而线程是进程中的执行单元/执行场景
    一个进程可以启动多个线程
    进程之间内存独立不共享，一个进程中的线程堆内存和方法区内存共享，栈内存独立，一个线程一个栈。
    栈之间互不干扰，这就是多线程并发，多线程并发提高程序的执行效率
2、对于java程序来说：
    java -jar 启动后，会先启动jvm，jvm就是一个进程
    jvm再启动一个主线程调用main方法
    同时在启动一个垃圾回收线程负责看护，回收垃圾。
    现在的java程序中至少有两个线程并发。
3、主线程结束，程序是否结束？
    main方法结束只是主栈结束，其他线程可能还在执行
4、对于单核的CPU来说，能否做到真正的多线程并发？
    1，多核CPU同时可以执行多个线程，有几个核就能执行几个线程。
    2，这些线程分属不同进程的话就是执行了多个进程。
    3，这些线程分属同一个进程的话就是只执行了一个进程的不同线程。
    4，多核CPU和多个CPU运行机制相同也不同，单就运行多线程任务来讲原理是差不多的。
    以上建立在没有线程切换执行的情况下。

    并发：当有多个线程在操作时,如果系统只有一个CPU,则它根本不可能真正同时进行一个以上的线程，
    它只能把CPU运行时间划分成若干个时间段,再将时间 段分配给各个线程执行，在一个时间段的线程代码运行时，
    其它线程处于挂起状。.这种方式我们称之为并发(Concurrent)。

    并行：当系统有一个以上CPU时,则线程的操作有可能非并发。
    当一个CPU执行一个线程时，另一个CPU可以执行另一个线程，两个线程互不抢占CPU资源，可以同时进行，
    这种方式我们称之为并行(Parallel)。
5、方法体内的代码自上而下逐行执行