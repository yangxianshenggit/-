1、Thread()
    构造方法，创建一个线程对象
    通常是某个类继承Thread，重写run方法，创建线程对象用的
2、Thread(Runnable r)
    构造方法，传入一个可执行对象，创建线程对象
    通常是一个类是Runnable接口，重写run方法，创建线程对象用的
3、String getName()
    获取线程名称，默认线程名称为 Thread-该线程创建时当前系统中线程数量+1
4、void setName(String name)
    设置线程名称
5、void start();
    在内存中开辟分支线程栈，开辟完后方法结束。
    线程从新建状态进入就绪状态，具有抢占cpu时间片的权力
6、void run()
    run的方法体内定义了分支线程执行的代码片段，通常一个线程类继承Thread或实现Runnable重写或实现run方法
    线程对象直接调用run方法，只是普通的实例方法调用；只有线程对象调用start()方法，在内存中开辟分支线程栈。
    线程从新建状态进入就绪状态，具有抢占cpu时间片的权力，当抢到cpu时间片时，jvm会自动调用线程对象的run方法
7、int getPriority()
    获取线程的优先级
8、void setPriority(int newPriority)
    设置线程的优先级，java中，线程优先级默认5，最小1，最大10。越大抢占的cpu时间片越长
9、static Thread currentThread()
     获取当前的线程对象，该方法出现在那个方法体，就获取执行该方法体的线程对象的引用。
10、static void yield()
    线程让位，该方法出现在那个方法体，执行该方法体的线程就会放弃cpu时间片，线程从运行状态回到就绪状态
11、static void sleep(long millis)
    当前正在执行的线程休眠（暂停执行）为指定的毫秒数，出现在那个方法体，执行该方法体的线程就会休眠
12、void interrupt()
   中断这个线程。  这个方法靠java异常机制使线程对象从阻塞状态变为就绪状态。
13、void stop();
    强制杀死线程。 有可能会造成数据丢失，谨慎使用
14、void join();
    线程合并，该方法出现在那个方法体，执行该方法体的线程进入阻塞状态，只有分支线程死亡后当前线程才会继续执行
    注意：线程之间发生等待关系，并不是栈合并
15、