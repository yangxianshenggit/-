SE重点归纳：
1.classpath、path、JAVA_HOME区别
2.静态方法、普通方法、实例方法储存在那
3.正则表达式
4.java在类加载的时候那些代码会执行
01 常用DOS命令，常用的一些快捷键以及运行窗口命令
		win+R 打开运行窗口
		输入cmd打开DOS命令窗口
			cd.  返回当前目录
			cd.. 返回到上级目录
			dir  查看当前目录下的所有文件
			mkdir + 文件名 在当前目录下新建文件夹
			rd 文件名 删除当前目录下该文件夹
			cls 清屏
			exit 退出DOS窗口
			切换盘符：目标盘符名：
		打开计算器 calc
		打开画板 mspaint
		打开服务窗口 services.msc
		打开记事本 notepad
	java分类、历史、特性
		JAVAEE企业版、JAVASE标准版、JAVAME微型版
		95年SUN公司发布，09年SUN被甲骨文收购，java创始人詹姆斯高斯林
		特性：简单性、面向对象、支持多线程、安全性
	path、classpath、JAVA_HOME三者之间区别
		path:windows操作系统的环境变量
		classpath：Java专属的环境变量
		JAVA_HOME:为web开发服务的环境变量
	JDK、JRE、JVM之间的关系
		JDK(java开发工具包) 包含 JRE(Java运行时环境) 包含JVM(java虚拟机)
	三大注释
		单行注释//常用在被注释代码的上方或后方
		多行注释/* */常用在被注释方法上方
		doc注释/**  */生成帮助文档类似于API文档
	public class与class之间的区别
		都是声明类的关键字
		public class表示公开的类
			一个类中只能使用一次，类中可以没有public class
		class 表示类
			一个类中可以有多个class
		public class和class都可以声明main方法，一个类中出现几次class编译后就会出现几个字节码文件

02 标识符命名规范、规则
		标识符是指程序员有权利命名的符号
		规则：标识符只能由数字字母下划线美元符号构成
				标识符只能以字母开头
				标识符理论上没有长度限制
		规范：见名知意
				遵循驼峰命名法
				标识符长度最好不要超过5个单词
				类名、接口名每个单词的首字母都要大写
				方法名、变量名首字母小写，后续单词首字母大写
				常量名每个字母都要大写，单词之间以_相连
	关键字含义
		SUN公司开发java语言时制定一些具有特殊意义的单词
		
	创建一个java文件名字是：123Test.java 可不可以？
		在操作系统上可以，但在java中编译不通过，类名不能以数字开头
 
03 变量三要素
		数据类型、变量名、字面量
	数据类型：基础数据类型、引用数据类型
	变量在使用的时候必须要先赋值，然后才能使用，默认情况下的值
	变量的划分
		根据数据类型不同分为基础数据类型和引用数据类型
		基础数据类型：byte short int long float double boolean char	
					1	  2	    4	8	4		8	 1		  2
			默认值   0     0    0   0L    0F    0.0D     false  \u0000
	变量作用域问题
		变量声明位置：在类中时成员变量，在方法中是局部变量
04 数据类型：八大基础数据类型，引用数据类型
	scanner对象创建及各种数据类型的接收
		java.util.Scanner input=new java.util.Scanner(System.in);
		int num=input.nextInt();
		double nums=input.nextDouble();
		char c=input.next.charAt(0);
		String str=input.next();
	ASCII编码规则：A-->65  a-->97  空格32
	常用的编码格式
		utf-8:中英文通用
		GBK:繁体中文
		iso-8859-1  纯英文的
      GB2312  GB18030  简体中文
	数据类型之间的转换
		八大基础数据类型除了boolean其余的都可以相互转换
		小容量转大容量自动转化
		大容量转小容量强制转换，强转会丢失精度
		当多种数据类型混合运算的时候，各自会转换成容量最大的那一种，再做运算。
		java中默认整数类型int，小数类型double
	转义字符
		\t表示制表符  \n表示换行 \u0000表示十六进制  \\表示一个\   \'表示单引号   \\“表示双引号

05 根据功能进行分类
	   算数运算符：+ - * / % ++ --(++或--必须跟在变量前后)
		关系运算符> < >= <= == !=
		逻辑运算符& | ^ && ||  !
		赋值运算符== *= /= %= += -=
		位运算符
			<<     左移（左边消失，右边补0）
			>>     右移（右边消失，左边补符号位）
		三目运算  布尔表达式？true:false
					
06 控制语句
		选择语句：if(){}else [if()]{}...
					 switch(){case num:..break; case num2:...break;...default:..}
		循环语句：多层循环嵌套，外层循环一次，内循环一圈
					 for(初始化表达式;布尔表达式;迭代式){循环体} 
					 foreach(数据类型 别名:数组名){循环体} //常用数组迭代
					 while(){}
					 do{}while();
		转向语句：break//停止循环，结束方法
					 continue//结束此次循环(跳过此条件的循环)，进入下次循环
		返回语句：return//可以有返回值，也可以没有

07 方法格式：访问修饰符 + 返回值类型 + 方法名(形参列表) {方法体}
		访问修饰符权限：
			访问修饰符		一个类		同包		子类		任意位置
			private				√			  
			default				√			√			 
			protected			√			√			 √
			public				√			√			 √				√
	注意：当参数列表中数据数量较多时用对象代替
	栈数据结构 队列
	方法重载：一个类中，方法名相同，返回值类型相同，参数列表不同：参数个数、参数顺序、数据类型

08 面向对象(OO)和面向过程(OP)
	[访问修饰符] class 类名{
	   [属性] 描述的是对象的特征：以Student为例  名字 年龄 分数 籍贯  性别 ....

		[方法] 描述对象的行为操作    以Student为例  学习  运动 吃饭  睡觉
	   
	}

09 Java只有一种调用方式，就是按值调用。
		针对传递基本类型和非基本类型来进行讨论：
		基本类型调用：
			传递基本类型，方法得到的值将是基本类型的拷贝，那么无论执行什么样的操作都不会对原始值造成影响。
			因为原始值和拷贝后的值不在一块内存区域中，所以各自执行操作都不会对对方的值造成影响。
		引用数据类型调用：
			引用数据类型，方法得到的值是引用的拷贝，执行操作指向原始值，会修改原始数据
			因为原始值和引用的值都指向同一块内存空间，所以执行操作都会对引用数据类型的值造成影响。
	构造方法：
		作用：创建对象并初始化属性。
		 语法格式
		 [访问修饰符] 类名([可能有参数列表，也可以没有根据需求来]){
		 }
		 public 类名（）{}
		 构造方法的特征或者说是注意事项：
		 1.构造方法的名字就是类名
		 2.构造方法是用来创建对象，还可以完成属性的初始化
		 3.构造方法是没有返回类型的，连void也不能写
		 4.构造方法返回的是当前类的类型
		 5.一个类中可以定义多个构造方法|（构造方法也是可以构成重载的）
		 注意事项：每个类都会有一个默认的无参数的构造方法，当我们手动的给类添加带参数的构造方法的时候
					  类中默认的无参数的构造方法将会被覆盖掉，所以我们一旦给类添加带参数的构造方法一定要
					  手动将无参数的构造方法写出来。
					  每个无参构造方法都会默认且不显示super()指向父类无参构造方法
	断点调试
		 1.设置断点：断点就是程序运行时暂停的代码行。
		 2.启动调试 :带小虫子的那个图标（DeBug）
		  下面的图示：
			variables  这里是变量监视区域 监测对象，又可以监测变量

			show execution point (Alt+F10) 如果你的光标在其他的页面，当我们点击的时候它会回到断点执行的行
			step over (F8) 步过，一行一行的往下走，如果这一行有方法它是不会进入方法的.
			step into (F7) 步入，如果当前行是个方法，我们就可以进入方法内部了。
			force step into (Alt+Shift+F7) 强行进入，能进入任何方法。可以查看底层代码的（Ctrl+鼠标左键）
		  3.单步运行
		  4.观察变量
		  5.发现问题  
		  6.修正代码
		  7.取消断点
		  8.重新运行程序
	创建对象：类名 对象名 = new  类名();
		调用实例方法和属性通过 对象名.方法名()/属性

10 封装在java代码上如何实现?
   第一步： 属性私有化.  
	          用private 实现私有化，public 公有 
				 私有属性除了本类其他地方不能访问
   第二步： 我们每一个私有的属性都会提供两个公有的访问方法
	          获取值： getXxx()  这个是有返回值的！！！
				 public 属性的数据类型 getXxx（）{
						return Xxx；
				 }
				 设置值： setXxx(属性对应的数据类型)
				 public void setXxx(属性对应的数据类型 变量名){
						this.xxx=xxx;
				 }
				    有些数据需要进行控制例如说年龄 在set访问器里面进行控制。
				 这是规定!!切记要遵守！！！！
		 私有属性，公有访问！

11 this关键字在内存方面指向的是堆内存的java对象，每一个java对象对应一个自己的this.
		  this的语法 
		  this.
		  this();  //调用无参数的构造方法，必须写在第一行！
		  this(某个属性);  //必须有这个构造方法！！
		  this只能用于一个类中，指当前类的对象
		  区分局部变量和其他变量的时候this不能省略
		  在静态方法中不能调用实例方法和实例变量
	static关键字
		用static修饰的都是跟类相关的,不需要使用new关键字了，静态方法中不能出现this，super关键字。
		用static 修饰的静态方法不能直接访问"实例"的相关数据：
			  在静态方法中不能直接调用非静态方法.在非静态方法中可以直接调用静态方法
			  在静态方法中不能直接使用非静态变量。在非静态方法中可以直接使用静态变量和非静态变量。
			  静态方法跟this一分钱关系都没有。
		静态代码块： static{代码块}	在类加载的时候执行，比main方法还早呢！
		实例代码块：{}	构造方法每次调用前都会调用
		总结：方法运行的时候都是在栈区
		局部变量存储在栈区，实例变量存储在堆区，静态变量存储在方法区
		实例方法储存在方法区，堆中的对象只是保存了实例方法的引用，静态方法储存在静态区
			Java中对象的存储位置
			new创建的对象存储在堆内存中；
			Java中常量的存储位置
			常量存放在常量池中，而常量池在方法区中
			Java中局部变量的存储位置
			局部变量存放在栈内存中
			Java中全局变量和Static常量的存储位置
			存放在全局数据区内存中
			java中static修饰的成员变量及参数存放位置
			存放在代码段内存中
		生命周期不同
　　		类变量的生命周期最长，随着类的加载而加载，随着类的消失而消失
　　		实例变量随着对象的消失而消失
			局部变量随着方法的消失而消失

12 继承：java中对于类只支持单继承，对于接口支持多实现
	每个类在没有明确指定父类的时候，它默认的父类是Object
	关于类继承的语法：子类(派生类) extends 父类(超类、基类) 
		通过is a 来判断两个类是否是继承关系
	父类中并不是所有的内容都能被子类继承：
    1.构造方法不能被继承 可以通过super关键字进行访问
	 2.私有属性能被继承，但不能直接访问私有属性 可以通过super.或get、set进行访问
	继承的作用？
	  继承最基本的作用是实现代码的复用
	  有了继承才会有方法的覆盖(重写)和实现多态
	方法的重写：
	 1.方法的重写必须是有线性关系的两个类才能进行，子类重写父类方法
	 2.子类方法重写时方法的访问修饰符的权限不能比父类的低
	 3.子类方法重写时若父类方法的返回值类型是基本数据类型，子类方法的返回值类型必须与其保持一致
	   若父类方法的返回值类型是引用数据类型，子类方法的返回值类型范围可以比父类的小
		其余的必须保持一致
	 4.子类覆盖父类的方法之后，我们使用子类对象调用方法一定是调用的重写之后的方法
	 5.方法覆盖只适用于实例方法，静态方法不存在重写一说

13 多态：同一种事物当外界的条件发生改变的时候体现出不同的"形态".
	 特点：
	   对象类型不可变，引用类型可变
		只能调用引用对应的类中定义的方法
		运行时会运行子类的覆盖的方法
		多态三个必要的条件：
		  要有继承 extends （implements后话）
		  要有重写
		  父类引用指向子类对象  父类 父类小写=new 子类大写（）
	向上转型：父类引用指向子类对象，自动转化
	向下转型：子类引用不能指向父类对象，若子类引用指向父类对象尝试用instanceof（实例化）来化解，否则报错
			Animal a=new Animal();
			if(a instanceof Cat){
				Cat c=(Cat) a
			}
	 静态绑定：编译阶段父类型引用调用方法java编译器会去父类中查找是否有该方法，没有则编译失败
	 动态绑定：运行期父类型引用指向的是子类型对象，会调用子类中重写后的方法，若子类没重写该方法则调用父类的方法
14 this语法：this.和this（）；
	this只能在一个类中使用
	this代表当前对象，可以用this.属性来区分局部变量和成员变量
	this（）代表调用当前类的无参构造方法，使用时必须在方法体的第一行
	this（属性）；代表调用当前类的有参构造方法，注意：这个构造方法必须已经创建了
		同样只能出现在方法体的第一行
	super语法：super.和super()；
	super只能用于具有线性关系中的子类，可以用super.父类属性，主要作用是子类重新定义了父类属性
		但又要调用父类该属性时所用
	super（）代表调用父类的无参构造方法，super（父类属性）代表调用父类的有参构造方法，注意
		父类中必须有该构造方法，
	super.属性和super（）必须用在方法体的第一行
	特殊情况：1.当父类定义了有参构造方法，而无定义无参构造方法，子类构造方法中必须用
			super（属性）来声明这个构造方法
		 2.当父类无参构造方法没有被覆盖时，子类的构造方法都默认存在super（），调用了父类的
			无参构造方法
	super()和this()不能同时使用在一个构造方法当中

15 final表示终态，最终的
	final修饰的类是无法继承的，final修饰的方法不能被重写，final修饰的变量叫常量 字母要全部大写。
	abstract表示抽象的
	该关键字能修饰类 方法.
		语法规则:
			 1.抽象类无法实例化，所以不能创建对象
			 2.抽象类虽然不能创建对象，但是是存在构造方法的,构造方法是给子类用的。
			 3.如何定义抽象类  class 前面添加 abstract
					 public abstract class Person {
					 
					 }
			 4.抽象类中是可以不写抽象方法的
			 5.如果一个方法是抽象方法，那么它必须出现在抽象类中
					  public abstract  void sayHi();
			 6.抽象类中既可以有抽象方法，还可以有普通方法，二者可以共存，可以有私有属性和私有方法
	接口里可以有：抽象方法(abstract可以省略)，静态常量
		 接口中的方法都是公开的(都是public的)
		 接口中的方法不能有方法体
		 接口之间可以多继承
		 接口只能通过类去实现，一个类可以实现很多接口implements
		 like a：像一个   现实体 像一个 抽象类？ true
	==和equals的区别
		==对于基本数据类型比的是数值大小，引用类型比的是内存地址，相等true，不相等是false
		equals比的是内容，一个一个相对比，一旦有不一样的直接终止对比。
		比如 “admin”和“adinm”，到m和i比较时直接false
  接口和抽象类的区别
	  1.接口是公开的，接口中不能有私有方法或者变量,构造方法，而抽象类是可以有私有属性和私有方法，构造的
	  2.接口实现类在实现接口的时候一定要实现接口中定义的所有的方法,
		  而抽象类是可以有选择的去重写需要用到的方法
	  3.接口之间是可以实现多重继承的,而一个类只能继承一个父类，但是可以实现多个接口.
			 单继承，多实现.
	tostring：把对象的属性以字符串的形式返回
   @Override
    public String toString() {
        return "Person{" +
                "name='" + name + '\'' +
                ", age=" + age +
                '}';
    }

	什么是内部类？
		在Java中，可以将一个类的定义放在另外一个类的定义内部，这就是内部类。内部类本身就是类的一个属性，与其他属性定义方式一致。
		静态内部类：定义在类内部的静态类，就是静态内部类。
			静态内部类可以访问外部类所有的静态变量、静态方法，而不可访问外部类的非静态变量非静态方法
			静态内部类的创建方式，new 外部类.静态内部类()
		成员内部类：定义在类内部，成员位置上的非静态类，就是成员内部类。
			成员内部类可以访问外部类所有的变量和方法，包括静态和非静态，私有和公有。
			成员内部类依赖于外部类的实例，它的创建方式外部类实例.new 内部类()
		局部内部类：定义在方法中的内部类，就是局部内部类。
			定义在实例方法中的局部类可以访问外部类的所有变量和方法，定义在静态方法中的局部类只能访问外部类的静态变量和方法。
			局部内部类的创建方式，在对应方法内，new 内部类()
		匿名内部类：匿名内部类就是没有名字的内部类，日常开发中使用的比较多
			匿名内部类必须继承一个抽象类或者实现一个接口。
			匿名内部类不能定义任何静态成员和静态方法。
			当所在的方法的形参需要被匿名内部类使用时，必须声明为 final。
			匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。
			创建方式：new 类/接口{};
			我们为什么要使用内部类呢？因为它有以下优点：
				一个内部类对象可以访问创建它的外部类对象的内容，包括私有数据！
				内部类不为同一包的其他类所见，具有很好的封装性；
				内部类有效实现了“多重继承”，优化 java 单继承的缺陷。
				匿名内部类可以很方便的定义回调。
			内部类有哪些应用场景
				一些多算法场合
				解决一些非面向对象的语句块。
				适当使用内部类，使得代码更加灵活和富有扩展性。
				当某个类除了它的外部类，不再被其他的类使用时。
		局部内部类和匿名内部类访问局部变量的时候，为什么变量必须要加上final？
			是因为生命周期不一致， 局部变量直接存储在栈中，当方法执行结束后，非final的局部变量就被销毁。
			而局部内部类对局部变量的引用依然存在，如果局部内部类要调用局部变量时，就会出错。
			加了final，可以确保局部内部类使用的变量与外层的局部变量区分开，解决了这个问题
16 数组：储存多个数据类型相同的数据的"集合"
		创建一维数组:数据类型[]数组名=new 数据类型[长度]  或 数据类型[]数组名={...}
			遍历数组：for(int i=0;i<数组名.length();i++){sout(数组名[i])}
						 for(数据类型 别名:数组名){sout(别名)}
			数组有索引(下标):从0开始，最大下标为length-1
			length是数组的属性，表示长度
		创建二维数组:数据类型[][]数组名=new 数据类型[行长度][列长度]  
				 //获取的是行
			  for (int i = 0; i <nums.length ; i++) {
					 //获取的是列
					for (int j = 0; j <nums[i].length ; j++) {
						 System.out.print(nums[i][j]+"\t");

					}
					System.out.println();
			  }
	冒泡排序、选择排序、斐波那契数列、二分查找法、阶乘
	java.util.Arrays;
	Arrays.sort 方法是给数组排序用，升序
	Arrays.binarySearch 方法是二叉查找的作用

17 public final class String
    implements java.io.Serializable, Comparable<String>, CharSequence,
               Constable, ConstantDesc {
				..... 
					}
	String字符串常量池：在方法区中，
	只要采用双引号赋值字符串，那么在编译期将会放到方法区中的字符串的常量池里,如
	果是运行时对字符串相加或相减会放到堆中（放之前会先验证方法区中是否含有相同的字符
	串常量，如果存在，把地址返回，如果不存在，先将字符串常量放到池中，然后再返回该对
	象的地址）

	String str=new String("A"+"B");中有几个对象：在字符串常量池中有三个“A”、"B"、"AB",
		java堆中有一个“AB"；如果题中所指对象是包含对象的引用，那么还要加上在栈区的
		引用堆区“AB"内存地址的str。
	StringBuffer 称为字符串缓冲区，它的工作原理是：预先申请一块内存，存放字符序列，如果
	字符序列满了，会重新改变缓存区的大小，以容纳更多的字符序列。StringBuffer 是可变对象，
	这个是 String 最大的不同,其中最重要的方法是apped，字符串拼接
	StringBuilder用法同 StringBuffer，StringBuilder 和 StringBuffer 的区别是 StringBuffer 中所有的方法都是同
	步的，是线程安全的，但速度慢，StringBuilder 的速度快，但线程不是安全的
	String常用方法：
		1. endsWith：判断字符串是否以指定的后缀结束
		2. startsWith，判断字符串是否以指定的前缀开始
		3. equals，字符串相等比较，不忽略大小写
		4. equalsIgnoreCase，字符串相等比较，忽略大小写
		5. indexOf，取得指定字符在字符串的位置
		6. lastIndexOf，返回最后一次字符串出现的位置
		7. length，取得字符串的长度
		8. replaceAll，替换字符串中指定的内容
		9. split，根据指定的正则表达式拆分字符串 例如去掉字符串中的所有*并拆分成若干字符串"[*]"
		10. substring，截子串
		11. trim,去首尾空格
		12. valueOf，将其他类型转换成字符串

	日期类：java.util.Date（获得日期）和java.text.SimpleDateFormat（日期格式化）
	//取得今天的日期
	Date today = new Date();
	System.out.println(today);
	//格式化日期
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd
	HH:mm:ss");
	System.out.println(sdf.format(today));
    日历：calendar日期的加减
		基本数据类型						它们的包装类
	byte									Byte
	short									Short
	int									Integer
	long									Long
	float									Float
	double								Double
	boolean								Boolean
	char									Character
	包装类和基本数据类型在于提供了更多的方法，这样更容易处理基本类型。所有的包装类都是
	final 的，所以不能创建其子类，包装类都是不可变对象
	除了 boolean 和 Character 外，其它的包装类都有 valueOf()和 parseXXX 方法，并且还具有
	byteVaue(),shortVaue(),intValue(),longValue(),floatValue()和 doubleValue()方法，这些方法是最
	常用的方法
	涉及到财务精准的计算用BigDecimal
   //注意了，涉及到财务的就用 BigDecimal
        BigDecimal bd1 = new BigDecimal("2.3");
        BigDecimal bd2 = new BigDecimal("3.6");
        //调用加法方法
        BigDecimal bd3=  bd1.add(bd2);
         //获取小数
        double num= bd3.doubleValue();
        System.out.println(num);
	 随机数Random  java.util.Random;
			Random r = new Random();
			for (int i=0; i<5; i++) {
			System.out.println(r.nextInt(100));
			其中产生的随机数是从0开始到99，不包含100
	 使用枚举类型，能够限定取值的范围,使程序在编译时就会及早的返现错误,这样程序会更加健壮
			enum  Sex {
				 MAN, WOMAN
			}

18 异常结构图
	 01 . 异常捕捉 try...catch..finally..
	 		 finally不执行的几种情况:
			  1.在finally语句中发生了异常
			  2. 在前面的代码行里用System.exit();意思：系统退出
			  3. 程序的线程死亡了
			  4. Cpu终止了
			注意，java程序始终遵循自上而下逐行执行的规则
			 小结一下： 
			 try  用于捕获异常 后面可以跟多个catch 也可以跟一个catch
			 catch  处理异常的（给咱们显示异常信息的）
			 finally  无论什么情况下都能被执行的区域 ，大多数用于资源释放  
	声明抛出 throw和throws
			 throw 写在方法体里面  throw new +异常类名；throw new ClassCastException;
			 throws 写在方法小括号后面	throws ClassCastException();
	final、finally、finalize区别
	 （1）final静态的，
		修饰类，类不可以被继承，
		修饰方法，方法不可以重写，
		修饰变量，其赋值后不能被改变类似于常量
		修饰参数：有两种情况
		A：形参为值类型，参数值不可更改
		B：形参为引用类型，参数不可再此赋值，但是引用的内容可以更改，例如数组
	（2）finally：最后
		在异常处理的时候，提供finally快来执行任何的清除操作。
		如果抛出一个异常，那么相匹配的catch字句就会执行，然后进入finally快，前提是有finally块
	（3）finallize:是方法名，java技术允许使用finalize()方法在垃圾收集器将对象从内存清除出去之前做必要的清理工作。
		这个方法是在垃圾收集器确认一个对象没有被引用时，对这个对象调用的。
		它是在Objec类中定义的，因此所有的类都继承它，子类覆盖了finalize()方法移整理系统资源或执行其他清理工作。
		finalize()方法是在垃圾收集器删除对象之前对这个对象调用的。
  自定义异常
	  语法格式
	  class 自定义异常类名 extends Exception{
			构造方法
	  }

19 集合结构图及其相应的方法，存储特点，底层原理
	集合中添加的都是内存地址，或基础数据类型包装类，自动拆箱装箱

	comparator位于java.util下，是一个比较器，进行对象比较时需先实现接口重写compar方法，
	在进行调用该接口方法时还需借助collections.sort(list,new comparator)方法
	public class DescComparator implements Comparator<Student> {
    /*Student stu=new Student();*/
    //降序
    @Override
    public int compare(Student o1, Student o2) {
			  if ( o1.getGrade() == o2.getGrade()) {
					return o1.getAge()-o2.getAge();
			  }
			  return (int) (o2.getGrade()-o1.getGrade());
		 }
	  }

	Comparable  是一个排序接口 位于 java.lang.Comparable ，如果一个类实现了Comparable接口，那就意味“ 该类支持排序” 
	public class Student implements Comparable <Student>{
				 private String name;
				 private int age;
				 private float grade;

				 @Override
				 public int compareTo(Student student) {
					  if (this.grade==student.grade) {
							return (int) (this.age-student.age);
					  }
					  return (int) (this.grade-student.grade);
				 }

			 //public static void reverse(List<?> list)
					  //反转指定列表中元素的顺序。
					  Collections.reverse(list);
					  /*Comparable方法
					  //集合遍历
					  Iterator<Student> iterator=list.iterator();
					  while(iterator.hasNext()){
							Student s=iterator.next();
							System.out.println(s);
					  }*/
					  //Comparator方法
					  Collections.sort(list,new DescComparator());
							System.out.println(list);
				 }
	涉及对象比较就重写HashCode和equlice方法

20 文件怎么读取的就怎么写入，什么格式读取就什么格式写入，对象读取，对象写入
	File类常用方法：
		new File("文件绝对路径")
		以下方法都是在创建File对象后进行的
		createNewFile()在指定路径下新建文件(文本)
		mkdir()在指定路径下创建文件夹
		delete()删除指定路径下的文件
		length()获取文件长度(字节数)
		listFiles()获取当前路径下所有子目录，返回File[]数组
		getAbsolutePath()获取当前文件的绝对路径
		exists()判断文件是否存在，不存在返回true
	FileInputStream：字节输入流
		read()
				从当前文件读取一个字节：这里是读取字节本身：读a就是读到97
				调用此方法进行读取文件，一次读取一个字节，需要进行循环读取，直到没有可读则返回-1
		read(byte b[])
				从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中，每次读取的都是数组长度的字节，循环，当文件剩余的字节数量比长度数量
				小，那么读到的剩余字节会覆盖到数组从下标0开始的字节数量个字节位置，后面的字节不变，直到读完返回-1
				这里注意：每次读取的字节都会转成字节对应的阿贾克斯码(ASCII编码规范),输出需要将对应的阿贾克斯码转换成对应的字符串，
				也就是源文件什么格式最后在控制台就输出什么样的格式，这里参考String方法将byte数组转换成字符串
				public String(byte[] bytes)通过使用平台的默认字符集解码指定的字节数组构造了一个新的 String。
				新的 String长度是一个字符集的功能，因此可能不相等的字节数组的长度。
				public String(byte[] bytes,int offset,int length)这里的bytes -解码为字符的字节数组 offset -第一个要解码的字节的索引 length -字节数解码
				注意修改编码规范，常用utf-8
		available():返回流当中剩余的字节数量(int)
				通常用法：可以返回文件总字节数量，设置byte数组的长度为该数量，可以不用循环直接调用read(byte[]bytes)方法一次性将文件读取完成
				注意：不适用大文件，几十万个字节的文件不成问题
		skip(long n):跳过几个字节不读(long)
		close()关闭流，释放资源，使用前先判断流是否为空，避免空指针异常

	FileOutputStream:字节输出流
		有个构造方法
			 FileOutputStream out=new FileOutputStream(pathname:file,[append:boolean]);
			 []内容看需求，如果追加，且不动原数据情况下选择true，默认不加[]内容时直接覆盖原内容,也就是会先清楚源文件所有内容然后进行写入
			  /*注意这个构造方法配合write方法会把abc原文件内容清空后才写,慎用
			 write(byte[] b) 
          将 b.length 个字节从指定 byte 数组写入此文件输出流中。
			 其中可能涉及数据类型转换，字符串类型转成字节数组方法  byte[]bs=str.getBytes();
			 flush()刷新缓存区，将内存中的残留数据强行写入，避免数据丢失
			 close()关闭流，释放资源，使用前先判断流是否为空，避免空指针异常

	序列化和反序列化
		对象序列化	实现接口Serializable
			  就是将java对象转换为字节序列的过程称为序列化
			  将字节序列转换为java对象的过程称为反序列化
		如果某个属性或方法不想被序列化 可以使用 transient
		注意：实现了Serializable后，要把序列化版本号手动写出来：
		public static final long SerializableUID=1L;
		只要指定了SerializableUID，就可以在序列化后，去添加一个字段，或者方法，
		而不会影响到反序列化，还原后的对象照样可以使用，而且还多了方法或者属性可以用。
		显式地定义SerializableUID有两种用途： 
　　　　1、 在某些场合，希望类的不同版本对序列化兼容，因此需要确保类的不同版本具有相同的serialVersionUID； 
　　　　2、 在某些场合，不希望类的不同版本对序列化兼容，因此需要确保类的不同版本具有不同的serialVersionUID。

	通常将对同一事物诸多属性定义为一个对象储存在集合当中，通过对象输入流和对象输出流进行读写操作
	ObjectInputstream:对象输入流  readObject()
	ObjectOutputStream:对象输出流 writeObject()

	标准输出流:
	 PrintWriter

	编码规范：
				iso-8859-1  纯英文的
            GB2312  GB18030  简体中文
            GBK 繁体中文
            utf-8  中英文通用
			在idea中使用FileInputStream改编码格式(避免中文乱码格式)：
				InputStream fis=null;
				InputStreamReader reader=null;
				BufferedReader br=null;
				fis=new FileInputStream(file);
				reader=new InputStreamReader(fis,"utf-8");
				br=new BufferedReader(reader);
				String line;
				while((line=br.readLine())!=null){
                System.out.println(line);
            }
				fis.close();
				br.close();
				reader.close();
			
			关于文件路径问题：
				1.通常在硬盘某个位置的文件进行读写，存储文件路径的file方式：可移植性差，换别的电脑上
				可能就失效了；idea默认路径是当前project的根
				通用方法，代码换位置了也可以正常读取指定文件，注意前提是代码必须在类路径下，也就是src下
				解释：Thread.currentThread()当前线程对象
							getContextClassLoader()是线程对象的方法
							getResource()【获取资源】这十类加载器对象的方法，当前线程的类加载器默认从类的根路径下加载资源
				String path=Thread.currentThread().getContextClassLoader().
								getResource("文件名.扩展名").getPath();
					这里是通过相对路径得到一个绝对路径
				2.更先进的方式，直接以流的方式传回来
					InputStream reader=Thread.currentThread().getContextClassLoader().
								gettResourceAsStream("文件名.扩展名");
						这里是通过相对路径得到一个绝对路径
				3.资源绑定器
					java.util包下提供了一个资源绑定器，便于获取属性配置文家中的内容
					使用以下这种方式的时候，属性配置文件xxx.properties必须放到类路径下（从当前src下开始作为起点）
					并且在写路径的时候，路径的扩展名不能写
					ResourceBundle bundle =ResourceBundle.getBundle("例如:com\powernode\entity\Dome");

21 开发多线程程序能够让CPU的利用率达到最大化

		进程与线程的区别
				每一个进程是都是一个应用软件，都有独立的内存空间；
				线程是进程的执行场景（执行单元），同一个进程中的线程共享其进程中的内存和资源
				（共享的内存是堆内存和方法区内存，栈内存不共享，每个线程有自己的栈。）
				进程：每个进程都有独立的代码和数据空间，进程间的切换会有较大的开销，一个进程包含1--n个线程。（进程是资源分配的最小单位）
				线程：同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器(PC)，线程切换开销小。（线程是cpu调度的最小单位）

		进程引入多线程的作用？
				提高进程的使用率。

		描述 java 程序的执行原理：
				java 命令执行会启动 JVM，JVM 的启动表示启动一个应用程序，表示启动了一个进程。
				该进程会自动启动一个“主线程”，然后主线程负责调用某个类的 main 方法。所以 main 方法
				的执行是在主线程中执行的。然后通过 main 方法代码的执行可以启动其他的“分支线程”。
				所以，main 方法结束程序不一定结束，因为其他的分支线程有可能还在执行。

		常见线程调度模型：
				抢占式调度模型(java就采用这种机制)：哪一个线程优先级较高，抢占的CPU时间片的概率就高一些
				均分式调度模型：平均分配CPU时间片，每个线程占有的时间相等
		
		线程的优先级
				  谁先执行的问题
					MAX_PRIORITY    最高10
						 线程可以具有的最高优先级。
					MIN_PRIORITY    最低1
						 线程可以具有的最低优先级。
					NORM_PRIORITY	 默认5
						 分配给线程的默认优先级。
					设置线程优先级方法： void  setPriority(int)
					获取线程优先级方法： int    getPriority()
		如何获取当前线程对象
				位于Thread类下的静态方法currentThread();
				Thread t=Thread.currentThread();
		获取和修改线程名字
				获取：String name=线程对象.getName();
				修改：线程对象.setName(String name);
				若没修改线程名字默认名字：
						main（主线程main的名字）
						其他的分支线程：Thread-0;Thread-1;...

		线程的生命周期：
				新建、就绪、运行、堵塞、死亡
		线程的创建
				Java 虚拟机的主线程入口是 main 方法，我们可以自己创建线程，创建方式：
				继承 Thread 类
				实现 Runnable 接口
				通过Callable接口和FutureTask类
				callable接口可以获取线程的执行结果，但获取线程结果时，当前线程受阻塞，效率较低
				获取线程结果执行FutureTask类get（）方法时会阻塞当前线程。
		线程的启动
				通过已创建Thread对象进行调用start方法，
				注意：采用 start 启动线程，不是直接调用 run（直接调用run 就是一个普通方法调用）
					start 不是马上执行线程，而是使线程进入就绪
					线程的正真执行是由 Java 的线程调度机制完成的
				启动线程
						线程对象.start();
		线程的阻塞
			线程睡眠：
				sleep方法属于Thread类中的静态方法 static void sleep(long millis)  毫秒  1000毫秒=1秒
				直接调用即可，作用：让当前线程进入休眠，放弃占有的CPU时间片，让给其他线程，进入阻塞状态
				注意：sleep出现在哪，无论是那个线程对象调用（名.sleep()）,都是指当前的线程进入休眠
						例如：在main方法里创建支线程对象t1，然后t1.sleep(5000);这是指main方法进入5秒休眠
									在t1的run方法中，这是指支线程t1休眠
			如何叫醒一个休眠状态的线程（不是中断线程的执行，而是终止睡眠，从阻塞状态变到就绪状态）
				t.interrupt();中断t的睡眠（这是靠程序的异常），让它继续工作
			合并线程：让当前线程进入阻塞状态，让其他线程执行，其他线程执行完毕后，当前线程才能继续执行
				join() 等待该线程终止
			如何在java程序中强行终止一个线程
				01.  t.stop();干掉这个线程   这属于强行终止，杀死线程，可能会丢失数据
				02.  合理的设置标记，通过true和false来控制

			线程让位：让线程暂停，不是阻塞，让当前线程放弃抢占的CPU时间片，从运行状态回到就绪状态，让其他同一级别的线程进行执行.
			我们使用 yield()方法的目的是什么？让相同级别的线程轮换执行,在实际中 yield()无法保持同步.因此让步的这个线程有可能被其他调度器再次选中.
				Thread类下的static void yield();

		Object类中线程方法
				 wait() 
					 在其他线程调用此对象的 notify() 方法或 notifyAll() 方法前，导致当前线程等待。
				 notify() 
					 唤醒在此对象监视器上等待的单个线程。他的调用可以让正在当前对象上等待的线程启动 
				 notifyAll() 
					 唤醒在此对象监视器上等待的所有线程。
				上述两个方法配合synchronized一起使用 ,针对于Object锁进行的.
				切记，一定要先notify再wait；当前线程干完活想睡觉必须先叫醒其他线程
		
	关注多线程并发环境下，数据的安全性	
		什么时候数据在并发环境下有安全问题
			01.并发环境下		02.有共享数据		03.共享数据有修改行为
			满足以上三个条件就存在向成安全问题
			局部变量和常量不需要考虑线程安全问题，
			HashTable和StringBuffer是典型的线程安全的例子，他们中的方法都使用synchronize修饰，方法同步，效率低
		如何解决：
			使用线程同步机制：线程不能并发，排队执行，虽然会牺牲一部分效率，但只有数据安全了才能谈效率
		同步编程模型与异步编程模型
			异步编程模型（多线程并发，效率高）：例如两个线程t1、t2，t1和t2各自执行，互不干扰
			同步编程模型（排队）：例如两个线程t1、t2，t1执行时候t2暂停，等t1执行完毕，t2才能执行
						synchronize是线程同步的关键字，
						synchronize（）{同步执行代码块}
						（）中必须是排队线程共享的对象，在java中，任何一个对象都有一把锁，这个锁就是标识
					synchronize出现在实例方法上就是锁住this，锁住当前对象
					synchronize出现在静态方法上，就是锁住当前类，100个对象100把锁，而一个类只有一把锁

22可变长度参数：例如 public static void show(int a,String...args){
				for(int i=0;i<args.length;i++){
					System.out.println(args[i]);
				}
			}
		String...args这就是可变长参数
		语法是：类型...（注意一定是三个点）
		01.可变长参数要求参数个数0-N个
		02.可变长参数在参数列表中必须是最后一个，而且一个参数列表中只能有一个可变长参数
		03.可变长参数可以当做一个数组来看待，也可以传进去一个数组，可变长参数有length属性，可以进行遍历
	