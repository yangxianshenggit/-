多线程：
	进程：一个进程对应一个应用程序 
	多进程作用：
		单核（一个cpu）计算机同一时间内只能做一件事
		cpu可以在多个进程之间频繁切换，切换速度极高，给人的感觉是多进程
		
		多进程作用不是提高执行速度，而是为了提高cpu的使用率
		进程和进程的内存是独立的
	线程：线程是一个进程中的执行场景，一个进程可以启动多个线程
	多线程有什么作用：
		不是为了提高执行速度，而是为了提高应用程序的使用率，一个应用程序同一时间只能执行一个线程
		线程之间共享"堆内存和方法区内存"，栈内存独立，一个线程一个栈
		给人错觉：多个线程同时并发
	java程序运行原理：
		java命令会启动jvm，相当于启动一个应用程序，一个进程，进程会自动启动一个主线程，然后主线程去调用某个类的main方法
		
		
	如何定义线程？如何创建线程？如何启动线程？
		main结束，程序可能还在运行
		1、继承Thread类，重写run方法
		在需要调用该线程的地方创建Thread子类，调用start方法
		class Thread01 extends Thread{
			public void run(){}
		}
		main(){
			Thread t=new Thread01()
			t.start();
			t.run();//这是普通方法调用，在主线程执行
		}
		其中strat()方法瞬间结束，告诉jvm分配一个栈给新的线程，
		run方法不需要手动调用，分支线程启动后会自动调用
		
		2、实现Runnable接口，实现run方法
		class Thread01 implements Runnable{
			public void run(){}
		}
		main(){
			Thread t=new Thread01(new Thread01());
			t.start();
			t.run();//这是普通方法调用，在主线程执行
		}
		
	线程的生命周期（state）
		新建、就绪、执行、阻塞、消亡
	
	线程的调度与控制
		cpu在某一时刻只能执行一个指令，线程只有得到cpu时间片才能执行指令。在单核计算机上线程不是并行运行，
		只有多核计算机上才可以并行。jvm主要负责线程的调度，取得cpu的使用权。
		目前有两种调度模型：分时调度模型和抢占式调度模型。java使用抢占式调度模型。
		分时调度：所有的线程轮流使用cpu的使用权，平均分配每个线程占用的cpu时间片
		抢占式调度：优先级高的线程获取cpu时间多一些（也不一定）。如果线程的优先级相同，则随机选择一个
	
		线程优先级：最低 1 最高 10 默认 5；优先级：1~10
			static int MAX_PRIORITY 线程可以拥有的最大优先级。  
			static int MIN_PRIORITY 线程可以拥有的最小优先级。  
			static int NORM_PRIORITY 被分配给线程的默认优先级。 

	Thread构造方法：
		new Thread();
		new Thread(Runnable r);
		
	Thread常用方法：
		void run();
			分支线程执行的逻辑代码
		void start();
			启动分支线程
		static 	Thread currentThread();
			获取当前线程对象，也就是说方法出现在哪个线程，就获取哪个线程对象
		String getName();
			获取当前线程名字
		String setName();
			设置当前线程名字
		int	getPriority();
			获取当前线程优先级 1~10
		void setPriority(int num);
			设置当前线程名字 1~10
		static void sleep(毫秒) throws InterruptedException;
			阻塞当前线程，腾出cpu让给其他线程
			例子：
				main(){
					Thread t=new Thread(new RunnableTest());
					t.start;
					t.sleep(1000);
				}
			请问t线程睡眠还是主线程睡眠，主线程睡眠，静态方法调用不通过对象
		void interrupt();
			线程对象调用方法会将线程中正在睡眠的语句抛出InterriptedException,打断睡眠
			这个方法主要靠异常中止睡眠
			如果不通过异常，则需要
			main()throws Exception{
					RunnableTest r=new RunnableTest();
					Thread t=new Thread(r);
					t.start;
					Thread.sleep(5000);
					r.flag=false;
				}
			class RunnableTest implements Runnable{
				boolean flag=true;
				public void run(){
					for(int i=0;i<100;i++){
						if(!flag){
							return;
						}
						Thread.sleep(1000);
					}
				}
			}
		static void yeild();
			不能指定暂停多长时间，并且只能让同优先级的线程有执行的机会
			当前线程执行到yeiled()方法，会放弃cpu时间片，从执行状态回到就绪状态
		
		void join();
			合并线程，线程对象A和出现的join位置的线程B合并，必将线程对象A执行完成后在执行B
			main()throws Exception{
					RunnableTest r=new RunnableTest();
					Thread t=new Thread(r);
					t.start;
					t.join();//t线程的run执行结束，main线程才继续执行
					System.out.println("2222");
				}
			class RunnableTest implements Runnable{
				
				public void run(){
					for(int i=0;i<100;i++){
						Thread.sleep(1000);
					}
				}
			}
	线程分类：守护线程、用户线程
		只有所有的用户线程都执行结束，守护线程才结束
		例如：jvm的垃圾回收器
		守护线程一般时无限执行的
		void setDaemon(boolean no); //true守护线程
	
	Object的方法：
		void wait();
		对象调用会让当前线程进行等待
		void notify();
		对象会唤醒使用这个对象的其他线程继续执行
		
		调用wait和notify，notifyAll的对象必须在同步方法（synchronized修饰的方法）或者同步代码块（synchronized（x）{}）中。
		否则出现异常java.lang.IllegalMonitorStateException
		
		原理：t1线程执行该方法，拿走num对象的对象锁
		并且输出t1-->1，唤醒t2线程，虽然t2线程被唤醒，
		t2线程并不会马上执行，因为t2线程无法获取到对象锁
交替输出的例子：
public class Wait_Notify {
    public static void main(String[] args) {
        Num num = new Num(1);
        Thread t1 = new Thread(new ThreadWN(num));
        Thread t2 = new Thread(new ThreadWN(num));
        t1.start();
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        t2.start();
    }
}
class ThreadWN implements Runnable {
    Num num;
    ThreadWN(Num num) {
        this.num = num;
    }
    @Override
    public void run() {
        num.add();
    }
}
class Num {
    Integer num;
    public Num(Integer num) {
        this.num = num;
    }
    synchronized void add() {
        while (true) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(Thread.currentThread().getName() + "-->" + (num++));
            this.notify();
            try {
                this.wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}