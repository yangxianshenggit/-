178、IO流
BIO、NIO、AIO
注意：文件拷贝若是整个文件夹目录都拷贝，必须进行路径处理，且文件的父路径必须存在才能拷贝文件
字符流：适用于任何场景
字节流：纯文本
java中1字节=2字符
java语言流分为4种：
	Closeable(Interface):close()
		InputStream(abs)：字节输入流、读流
			FileInputStream
			FilterInputStream
				BufferedInputStream
				DataInputStream
			ObjectInputStream
		OutputStream(abs) implements Flushable：字节输出流、写流  flush()
			FileOutputStream
			FilterOutputStream
				BufferedOutputStream
				DataOutputStream
				PrintStream
			ObjectOutputStream
			
		Reader：字符输入流、读流
			InputStreamReader：转换流（字节--》字符）
				FileReader文件字符输入流
			BufferedReader带有缓冲区的字符输入流
		Writer implements Flushable：字符输出流、写流	flush()
			OutputStreamWriter转换流（字节--》字符）
				FileWriter文件字符输出流
			BufferedWriter带有缓冲区的字符输出流
			PrintWriter
			
			
		Serialzable:序列化
		transien:暂时的，对属性不进行序列化
		File:文件和目录路径名的抽象表现形式，代表硬盘上的文件夹和文件
			构造方法：
				new File(String pathname);
				
			常用方法：	
				boolean exists();
					判断文件或文件夹是否存在
				void mkdir();
					创建文件夹，使用前务必判断文件夹是否存在
				void mkdirs();
					创建多层目录，使用前务必判断目录是否存在
				void createNewFile();
					创建文件，使用前务必判断文件是否存在
				String getAbsolutePath();
					获取文件的绝对路径
				String getName()
					获取当前文件名称
				String getParent();
					获取父路径
				boolean isDirectory()
					是否是一个目录
				boolean isFile()
					是否是一个文件
				boolean isAbsolute()
					是否是一个绝对路径
				long lastModified()
					获取文件最后编辑时间
				long length()
					获取文件的字节数
				File[] listFiles()
					获取当前目录下所有文件或文件夹的数组
					筛选文件配合endWith判断
FileInputStream：文件字节输入流
	构造方法：
		new FileInputStream(String name);//文件的路径，带扩展名
	
	常用方法：
		int read();
			以字节的方式读取，一次一个字节；没有可读的时候返回-1，可读返回字符编码对应的数字
			对磁盘有害，交互太频繁，效率低
		int read(byte[]bytes);
			读取之前在内存中准备一个byte数组，读取到byte中，读取多个字节，没有可读返回-1，可读返回读取的有效字节数
			byte数组转字符串：new String(byte[]bytes)、new String(byte[]bytes,begindex,endindex)
		int available();
			返回流中剩余估计的字节数;
		long skip(long l);
			指针跳过几个字节；

FileOutputStream：文件字节输出流
	构造方法：
		new FileOutputStream(String filepath);
			文件的路径，带扩展名,文件不存在则自动创建,但不会追加写入，会将源文件内容覆盖
		new FileOutputStream(String filepath,boolean append);
			文件的路径，带扩展名,文件不存在则自动创建,可以追加写入
		
	常用方法：
		void write(byte[] b);
			将byte数组写入
		void write(byte[] b,int off,int len); 
			从byte数组b的第off个字节写入，写len长度

Reader(abs)：字符输入流、读流
	InputStreamReader：转换流（字节--》字符）
		构造方法：
			new InputStreamReader(InputStream is);
				可以将一个字节输入流装转换为字符输入流，主要配合BufferedReader使用
		FileReader文件字符输入流
			构造方法：
				new FileReader(String filepath);
					文件的路径，带扩展名
				
			常用方法：
				int read();
					字符的方式读取，一次一个字符；没有可读的时候返回-1，可读返回字符编码对应的数字
					对磁盘有害，交互太频繁，效率低
				int read(char[]cs);
					读取之前在内存中准备一个char数组，读取到char中，读取多个字符，没有可读返回-1，可读返回读取的有效字符数
					char数组转字符串：new String(char[]cs)、new String(char[]cs,begindex,endindex)
				int available();
					返回流中剩余估计的字符数;
				long skip(long l);
					指针跳过几个字符；

			BufferedReader：装饰者模式
				构造方法：
					new BufferedReader(Reader r);
						例如：new BufferedReader(new InputStreamReader(new FileInputStream("")));
				常用方法：
					String readLine();
						一次读一行，返回String，没有可读时候返回null，注意读取到的没有换行符，手动加上换行符，行尾会带上换行符
					void close();
						关闭流就会自动关闭Reader
				
					Scanner s=new Scanner(System.in);
					String str=s.next();
						inputseream标准的输入流，默认接收键盘的输入,但以空格结尾取的
					BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
					String str=br.readLine();
						一次输入一行
Writer(abs) implements Flushable：字符输出流、写流	flush()
	OutputStreamWriter转换流（字节--》字符）
		FileWriter文件字符输出流
			构造方法：
				new FileWriter(String filepath);
					文件的路径，带扩展名，没有文件则创建，会覆盖源文件
				new FileWriter(String filepath，boolean append);
					文件的路径，带扩展名，没有文件则创建，可以追加写入
			
				常用方法：
					void write(char[] c);
						将char数组写入
					void write(char[] c,int off,int len); 
						从char数组c的第off个字符写入，写len长度
					void write(String s);
						将字符串写入
					void write(String s,int off,int len); 
						从String s的第off个字符写入，写len长度
						
			BufferedWriter：装饰者模式
				构造方法：
					new BufferedWriter(Writer w);
						例如：new BufferedWriter(new OutputStreamReader(new FileOutputStream("")));
				常用方法：
					void write(String s);
					void write(String s,int off ,int len);
					void newLine();
						写入一个换行符


java.io.InputStream 
	java.io.FilterInputStream 
		java.io.DataInputStream 数据字节输入流
		注意：要使用该流读取数据，必须事先知道这个文件的格式，按照这个格式读取
		构造方法：
		new	DataInputStream(InputStream in);

		常用方法：
			int read(int b);
				将一个int类型读出
			double readDouble();
				将一个double类型读出 
			...基本数据类型
					
					
java.io.OutputStream 
	java.io.FilterOutputStream 
		java.io.DataOutputStream 数据字节输出流
		可以将内存中的“int i=10；”全部写道文件中，写进去的不是字符串，全是二进制，带类型
		构造方法：
		new	DataOutputStream(OutputStream out);

		常用方法：
			void write(int b);
				将一个int类型写入
			void writeDouble(double v);
				将一个double类型写入
			void writeUTF(String str); 
			...基本数据类型
			
			
java.io.PrintStream:标准的输出流，默认以字节的方式打印到控制台
java.io.PrintWriter:标准的输出流，默认以字符的方式打印到控制台
	
	构造方法：
		PrintStream(OutputStream out) 
		
	System.out.println();
		默认输出到控制台
	PrintStream ps=System.out;
	ps.println();
		输出到控制台
	
	static void setOut(PrintStream out) 
		改变流的方向
		System.setOut(new PrintStream(new FileOutputStream("log")));


ObjectOutputStream
	将对象由内存写入磁盘为序列化（Serial）
	将对象由硬盘读入内存为反序列化（DeSerial）
	要序列化的对象要实现 Serializable 接口，标识该类支持序列化
	标识接口的作用：
		如果jvm看到了某个对象实现了标识接口，会对该对象特殊待遇
		在对象要实现 Serializable 接口，编译时对这个类添加一个属性 static final long serialVersionUID；
		这样不管类怎样升级，都不会产生类的兼容性问题。如果不想让类的某个属性被序列化，可以使用transient修饰（含义：暂时的）
	例如：cloneable、serializeable
	构造方法：
		new ObjectOutputStream(OutputStream out) 
		
	常用方法：
		void writeObject(Object obj) 
		写入指定的对象
		
ObjectInputStream
	构造方法：	
		new ObjectInputStream(InputStream in);
		
	常用方法：
		Object readObject();