147
集合：容器，存储引用数据类型、不能存储基本数据类型 
collection：存储单个元素的集合的根
	继承了Iterable接口，Iterable中方法返回了iterator迭代器。
	collection依赖Iterator接口；
		Iterator:迭代器
			boolean hasnext():是否有下一个元素
			E next():返回下一个元素
			remove():删除元素
			
	list集合特点：有序可重复
		for(int i=0,i<list.size();i++)
		foreach
		get(int index );
		add(int index,Object o)
			ArrayList：有序可重复，底层一维数组
				默认初始化容量10，扩大之后原容量1.5倍
			LinkedList:有序可重复,底层双向链表
				没有初始化容量一说，就一个头节点
			Vector:线程安全的，底层和ArrayList一样
				默认初始化容量10，扩大之后原容量2倍
			如何优化ArrayList和Vector？
				尽量减少扩容操作，扩容的时候需要数组拷贝，很耗内存。
				一般推荐创建的时候指定容量
	Set集合特点：无序，不可重复
		HashSet:哈希表，HashMap的key；元素要重写equals和hashcode
		SortedSet:自动根据 元素大小进行排序,元素要实现comparable或单独写个比较器comparator
			TreeSet:为什么可以进行元素大小自动排序？
				TreeSet的add方法中调用了对象的compareTo方法
				方案一：向TreeSet中添加的元素的类必须实现接口comparable（SUN提供的可比较的接口），
						重写compareTo方法，声明比较规则,可以升叙也可以倒叙
						class User implement Comparable{
							int age;
							String name;
							public int compareTo(Object o){
								return this.age-(User)o.age;
							}
							public int compareTo(Object o){
								return this.name.compareTo((User)o.name);
							}
						}
				方案二：创建一个比较器，在创建TreeSet集合的时候传进去
				new TreeSet(new Stu2Comparator());
				class Stu2Comparator implements Comparator{
					@Override
					public int compare(Object o1, Object o2) {
						return ((User)o2).age-((User)o1).age;
					}
				}
						
	常用方法：
	contains(Object o);集合中是否包含元素
		底层使用了元素的equals方法，重写equals的必要
	add(Object o);添加元素
	Iterator iterator();返回集合的迭代器
		这里运用了迭代模式，常用集合遍历foreach  while  for(Iterator it=c.iterator;it.hasnext();){Object o=it.next();} 
	boolean isEmpty();为空返回true
	clear();清空集合
	int size();集合元素的个数
	remove();删除集合中的元素
		集合自身删除，遍历的时候要通过迭代器自身的删除
	toArray();返回数组


Map<K,V>:
	HashMap:哈希表（散列表）：key要重写equals和hashcode,当key重复会覆盖v
		底层是一维数组，数组的每个元素都是单向链表，单向链表之间的hashcode值都不相同，而单向链表上每个节点的hashcode
		都相同,当链表长度大于8的时候转换为红黑树,当树的节点数小于等于6转成链表。哈希表增删查的效率都很高。元素要均匀分布，重写hashcode(有技巧，散列均匀分布的作用)和equals的必要
		
		初始化容量16，默认加载因子0.75（在元素占用四分之三的时候开始扩容）
		Object get(Object key)
			通过key调用Object的hashcode()方法通过
			“hash function”计算出哈希值，方法计算出哈希值，哈希值通过散列函数计算出数组的下标,如果下标位置没有这个哈希值，直接加入元素。
			如果hash值已存在则便利整个单向链表，将每个元素的key进行equals方法比较要查找value的key，
			若碰到相同的key则返回对应的value，若没有相同的key，则代表HashMap中没有要查找的元素
		void put(Object key,Object value)
			通过key调用Object的hashcode()方法计算出哈希值，哈希值通过散列函数计算出数组的下标,若当前下标位置有
			单向链表则便利整个单向链表将每个元素的key进行equals方法比较要加入元素的key，若没有相同的key，则在单
			向链表上加上这个元素，若下标位置没有单项链表则直接创建并加入元素
			jdk1.8之前时头插法，jdk1.8之后时尾插法
		
	SortedMap:key要实现comparable或单独写个比较器comparator
		TreeMap
	
	Hashtable:线程安全的，初始化容量11，默认加载因子0.75
		properties:属性类,k,v都是字符串
			getPropertie(String k,String v)
			setPropertie(String k)
				调用hashtable的put
			load(InputStream in);
			load(Reader r);
				将流中的数据加载到properties中
		使程序更加灵活，java规范中声明了配置文件以“.properties”结束
		属性文件中的数据要求：key和value之间可以使用:空格=，如果三个符号都有按最前的作为分隔符、
		如果属性配置文件中有中文则使用native2ascii工具将中文转为ascii码使用
	常用方法：
		void clear();清空集合
		boolean containsKey(Object o);是否存在key
		boolean contains(Object o);是否存在value
		
		Set<Map.Entry<K,V>> entrySet();返回set集合
		
		Object get(Object key);获取v
		boolean isEmpty();是否为空
		Set keySet();获取Map中所有的key，可以遍历map集合
		Object remove(Object key);删除元素
		int size();键值对的个数
		Collection<V>values();获取Map中所有的v
	
Collections工具类
	static void sort(List l);集合排序
	static void sort(List l,Comparator c);集合排序,指定比较器
		注意集合中存储的元素必须实现comparable或创建一个比较器实现comparator
		
Collections针对每种集合都声明了一个线程安全的包装类，在原集合的基础上添加了锁对象，集合中的每个方法都通过这个锁对象实现同步

java.util.concurrent包中的集合
1.ConcurrentHashMap
ConcurrentHashMap和HashTable都是线程安全的集合，它们的不同主要是加锁粒度上的不同。HashTable的加锁方法是给每个方法加上synchronized关键字，
这样锁住的是整个Table对象。而ConcurrentHashMap是更细粒度的加锁
在JDK1.8之前，ConcurrentHashMap加的是分段锁，也就是Segment锁，每个Segment含有整个table的一部分，这样不同分段之间的并发操作就互不影响
JDK1.8对此做了进一步的改进，它取消了Segment字段，直接在table元素上加锁，实现对每一行进行加锁，进一步减小了并发冲突的概率

2.CopyOnWriteArrayList和CopyOnWriteArraySet
它们是加了写锁的ArrayList和ArraySet，锁住的是整个对象，但读操作可以并发执行

3.
除此之外还有ConcurrentSkipListMap、ConcurrentSkipListSet、ConcurrentLinkedQueue、ConcurrentLinkedDeque等，至于为什么没有ConcurrentArrayList，
原因是无法设计一个通用的而且可以规避ArrayList的并发瓶颈的线程安全的集合类，只能锁住整个list，这用Collections里的包装类就能办到
